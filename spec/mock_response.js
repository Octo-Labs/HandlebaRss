var mockResponse = {"responseData": {"feed":{
  "feedUrl":"http://www.octolabs.com/blogs/octoblog/feed.xml",
  "title":"OctoBlog","link":"http://www.octolabs.com/blogs/octoblog",
  "author":"Blog Author","description":"The OctoLabs Blog.","type":"atom10",
  "entries":[{"title":"Techlahoma - Multiple Authentications (Part 2)","link":"http://www.octolabs.com/blogs/octoblog/2014/01/07/techlahoma_multiple_authentications_part_2/","author":"Article Author","publishedDate":"Mon, 06 Jan 2014 16:00:00 -0800","contentSnippet":"In the last episode we started to implement the feature to allow a user to connect multiple social profiles to their Techlahoma ...","content":"\u003cp\u003e\u003cspan\u003eIn the \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2014/1/7/techlahoma_multiple_authentications_p1\"\u003elast episode\u003c/a\u003e\u003cspan\u003e we started to implement the feature to allow a user to connect multiple social profiles to their Techlahoma account. Today we’ll finish that feature.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eCurrently, when we run cucumber we're seeing this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber -r features features/users/multiple_auth.feature:9\n...\n    Then she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003e# features/step_definitions/users_steps.rb:24\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Welcome Test User! Sign Out Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:17:in \u003cspan\u003e`\u003c/span\u003eThen she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThis step in the scenario covers the fact that we want to encourage people to make their account connections public when they return to Techlahoma after the OAuth dance.  Essentially we just want to show the user their new authentication, and allow them to update it.  This is a sub-set of the standard REST actions, so lets use a dedicated \u003ccode\u003eAuthenticationsController\u003c/code\u003e to handle the job.\u003c/p\u003e\n\n\u003cpre\u003erails g controller authentications\n\u003c/pre\u003e\n\u003cp\u003eThen we should add routes for the \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions in \u003ccode\u003econfig/routes.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eresources\u003c/span\u003e \u003cspan\u003e:authentications\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:only\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:edit\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e:update\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen we can just stub the methods in the controller\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthenticationsController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eedit\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen we can add a template at \u003ccode\u003eapp/views/authentications/edit.html.erb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003eWould you like to make this public?\n\u003c/pre\u003e\n\u003cp\u003eNow we just need to redirect to this route when we have a newly created authentication.  So the new \u003ccode\u003ecreate\u003c/code\u003e method looks like this.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n    \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreated_at\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eTime\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eseconds\u003c/span\u003e\n      \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eedit_authentication_path\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\n      \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow cucumber lets us know that its time time actually build the part that will allow the user to make the connection public.\u003c/p\u003e\n\n\u003cpre\u003e...\n    When she makes the provider public                        \u003cspan\u003e# features/users/multiple_auth.feature:18\u003c/span\u003e\n      Undefined step: \u003cspan\u003e\"she makes the provider public\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eCucumber::Undefined\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:18:in \u003cspan\u003e`\u003c/span\u003eWhen she makes the provider public\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003ch2\u003eSecond Thoughts\u003c/h2\u003e\n\n\u003cp\u003eSince the time that I first wrote the feature scenario I've had a chance to discuss this scenario with Rob.  We agreed that the initial scenario called for functionality that we really don't need. We intentionally choose to use 3rd party authentication providers so that we can't be responsible for leaking passwords in a worst case scenario.  Following on the idea that we don't want to be keeping secrets on behalf of our users we decided that we don't need to allow users to show and hide a social profile connection.  Our policy will be that Techlahoma is a public community forum, and that everything that happens there is public.  If you don't want people to see your Twitter profile on your Techlahoma page, just don't connect your Twitter account.\u003c/p\u003e\n\n\u003cp\u003eThat means we get to trim down the scenario.  Here's the new scenario after removing all of the steps that have to do with making a connection public.\u003c/p\u003e\n\n\u003cpre\u003e \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add Twitter\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with GitHub\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her Twitter account\n    \u003cspan\u003eThen\u003c/span\u003e User.count should \u003d\u003d 1\n    \u003cspan\u003eThen\u003c/span\u003e Authentication.count should \u003d\u003d 2\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove Twitter\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch2\u003eCleaning up\u003c/h2\u003e\n\n\u003cp\u003eNow we need to clean up a thing or two from earlier in this post.  First we can clean up the redirect logic in the \u003ccode\u003eSessionsController#create\u003c/code\u003e method and just redirect to the profile path.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n    \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n    \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eprofile_path\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter redirecting the user back to their profile we'll want to show them a \"Remove Twitter\" link in place of the current \"Add your Twitter account\" link.  We'll have that link point to a \u003ccode\u003edestroy\u003c/code\u003e on the \u003ccode\u003eAuthenticationsController\u003c/code\u003e.  We can also remove the edit and update methods from that controller and their routes from \u003ccode\u003eroutes.rb\u003c/code\u003e.  So after making some changes the \u003ccode\u003eAuthenticationsController\u003c/code\u003e looks like this.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthenticationsController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edestroy\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd the authentications route looks like this.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eresources\u003c/span\u003e \u003cspan\u003e:authentications\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:only\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:destroy\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe profile template needs to determine if the current user has a Twitter authentication or not, so lets imagine that we have a method called \u003ccode\u003eauthentication_for\u003c/code\u003e and we'll use it in our template to do this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'twitter'\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/twitter\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e'Remove Twitter'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'twitter'\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003e:confirm\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'Are you sure?'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:method\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:delete\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe can add a simple \u003ccode\u003eauthentication_for\u003c/code\u003e method to the \u003ccode\u003eUser\u003c/code\u003e model.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eauthentication_for\u003c/span\u003e \u003cspan\u003eprovider\u003c/span\u003e\n    \u003cspan\u003eauthentications\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:providere\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003eprovider\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow our entire scenario passes!  Hooray!  But wait, we haven't actually implemented the action for removing an account….  Our scenario was incomplete, so we need to add a few lines to it.  We can just tack this onto the end of it.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003eWhen\u003c/span\u003e she removes her Twitter account\n  \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe already have a step definition for the second new line, and the definition for the first new one is easy to write.  \u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she removes her Twitter account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Remove Twitter\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we just need to implement the delete method.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edestroy\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentications\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edestroy\u003c/span\u003e\n    \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eprofile_path\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eScenario complete!\u003c/p\u003e\n\n\u003ch2\u003eAdding GitHub\u003c/h2\u003e\n\n\u003cp\u003eNow we need to update the \"Add GitHub\" scenario to match the new requirements, and to be a complete scenario.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add GitHub\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with Twitter\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your GitHub account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her GitHub account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove GitHub\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she removes her GitHub account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your GitHub account\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eTo implement all of the steps in this scenario we'll update some existing steps to be more flexible.  We'll also extract some of the code in the application to be more general and to account for both Twitter and GitHub.\u003c/p\u003e\n\n\u003cp\u003eFor the first step we can alter the existing step definition for \"Given a user signed in with GitHub\".\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a user signed in with (.*?)$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/signin\"\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In With \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow the first failing step is \u003ccode\u003eThen she should see \"Add your GitHub account\"\u003c/code\u003e.  The existing profile template is a good pattern for what we want for a single service.  So let's move the contents of that file into a new partial file called \u003ccode\u003eapp/views/profile/_service_options.html.erb\u003c/code\u003e.  We'll also change all of the references to Twitter to use variables instead.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Add your \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003efriendly\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e account\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/\u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Remove \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003efriendly\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003e:data\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e:confirm\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'Are you sure?'\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e \u003cspan\u003e:method\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:delete\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow in \u003ccode\u003eprofile/index.html.erb\u003c/code\u003e we can just call that partial once for Twitter and once for GitHub.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003erender\u003c/span\u003e \u003cspan\u003e'service_options'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:service\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'twitter'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:friendly\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'Twitter'\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;br/\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003erender\u003c/span\u003e \u003cspan\u003e'service_options'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:service\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'github'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:friendly\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'GitHub'\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eFor the next step, \u003ccode\u003eWhen she adds her GitHub account\u003c/code\u003e, we can again alter an existing step.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she adds her (.*?) account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Add your \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e account\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd finally, we can alter the \u003ccode\u003eWhen she removes her Twitter account\u003c/code\u003e step to also handle GitHub.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she removes her (.*?) account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Remove \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd that's it!  Now we can allow users to log in with either Twitter or GitHub, and then after logging in they can add the other service to their account.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - Multiple Authentications (Part 1)","link":"http://www.octolabs.com/blogs/octoblog/2014/01/07/techlahoma_multiple_authentications_p1/","author":"Article Author","publishedDate":"Mon, 06 Jan 2014 16:00:00 -0800","contentSnippet":"For Techlahoma we’ve decided that we want to allow a user to connect multiple social profiles to a single account. In this ...","content":"\u003cp\u003e\u003cspan\u003eFor Techlahoma we’ve decided that we want to allow a user to connect multiple social profiles to a single account. In this installment we’ll look at writing some feature scenarios that describe the functionality that we need, and then we’ll fill out the step definitions needed to turn those scenarios into fully executable tests.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter spending a few minutes working on a couple of feature scenarios I ended up with two scenarios that cover most of the contours of this feature.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Multiple Auth Providers\n  As a Techlahoma admin\n  I want to allow users to show links to their various online personas\n  But I want to verify that the things they are linking to are legit\n  So I want to allow them to authenticate with multiple auth providers\n  And I'll build the URL to their profiles myself\n  The user should have the option to show/hide each provider\n\n  @omniauth_test\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add Twitter\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with GitHub\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her Twitter account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she makes the provider public\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove Twitter\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Hide Twitter\"\u003c/span\u003e\n\n  \u003cspan\u003e@omniauth_test\u003c/span\u003e\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add GitHub\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with Twitter\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your GitHub account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her GitHub account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she does not make the provider public\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove GitHub\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Show GitHub\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch2\u003eScenario : Add Twitter\u003c/h2\u003e\n\n\u003cp\u003eFocusing just on the \"Add Twitter\" scenario we can get right to work implementing step definitions.  The first step is very straight forward, we just need to set up a user that is signed in through GitHub.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a user signed in with GitHub$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/signin\"\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThis step exercises code that's already in place, so we immediately get a passing step when running cucumber.\u003c/p\u003e\n\n\u003cp\u003eNext up we need a step definition for \"When she visits her profile\".  This step is also pretty easy.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she visits her profile$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/profile\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when we run cucumber we can see that we have some code to write to get this step to pass.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber -r features features/users/multiple_auth.feature:9\n...\n    When she visits her profile \u003cspan\u003e# features/step_definitions/users_steps.rb:19\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/profile\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:11:in \u003cspan\u003e`\u003c/span\u003eWhen she visits her profile\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eFirst, lets generate a controller and view to handle the \u003ccode\u003e/profile\u003c/code\u003e path.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003erails g controller profile index\n\u003c/pre\u003e\n\u003cp\u003eThen edit \u003ccode\u003econfig/routes.rb\u003c/code\u003e and change this line:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"profile/index\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eto this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"profile\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"profile#index\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow for the next step, \"Then she should see …\", we can just adapt a step definition that we already have in place.  We already have a step for \"The HE should see …\", so we can slightly alter the regex in that step to pick up either he or she.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eThen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^[s]?he should see \"(.*?)\"$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003epage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e \u003cspan\u003ehave_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eSo, now we need to start beefing up the profile page.  We can get the current step to pass by just opening \u003ccode\u003eapp/views/profile/index.html.erb\u003c/code\u003e and replacing the generated content with this:\u003c/p\u003e\n\n\u003cpre\u003eAdd your Twitter account\n\u003c/pre\u003e\n\u003cp\u003eNow, this might seem like cheating since we haven't actually put any functionality behind that (not even a link) text.  That's OK.  We're going to have to address that issue soon enough (in the very next step!) and for now we are continuing to make progress by working our way through our failing (or unimplemented) steps.  Ideally the feature scenarios that we write will have enough detail that if we continue to write detailed features and then implement their steps we'll end up with only the application code that we need to satisfy the tested scenarios, and nothing more.\u003c/p\u003e\n\n\u003cp\u003eNow we're onto the step to actually add the Twitter account.  The step definition itself is very simple.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she adds her Twitter account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when we run cucumber it will tell us that the reprieve earned from \"cheating\" in the last step is short lived.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber -r features features/users/multiple_auth.feature:9\n...\n    When she adds her Twitter account \u003cspan\u003e# features/step_definitions/users_steps.rb:34\u003c/span\u003e\n      Unable to find link or button \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eCapybara::ElementNotFound\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:13:in \u003cspan\u003e`\u003c/span\u003eWhen she adds her Twitter account\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eSo at this point we're ready to actually add the Twitter authentication.  We're relying on OmniAuth to handle most of the heavy lifting, so to get things started we just need to link the user to \u003ccode\u003e/auth/twitter\u003c/code\u003e.  So we can update the profile template to look like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/twitter\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow cumber lets us know that we're on to the next step:\u003c/p\u003e\n\n\u003cpre\u003e...\n     Then she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003e# features/step_definitions/users_steps.rb:24\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Welcome Test User! Sign Out Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:16:in \u003cspan\u003e`\u003c/span\u003eThen she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003ch2\u003eA quick bug hunt and fix\u003c/h2\u003e\n\n\u003cp\u003eFrom the error above we can see that the \u003ccode\u003ehome/index\u003c/code\u003e template is being rendered and cucumber is not finding the text \"Would you like to make this public?\".  We could go straight to implementing that step, but I have a hunch that something isn't quite right with the implementation for ADDING a Twitter auth onto an existing GitHub auth.  After all, we haven't written any code specifically for that situation.  I suspect that after the Twitter auth dance happens that a new user is being created and the old user is being logged out.  So, just to test my hunch lets modify the scenario to check for a couple of things.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e...\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her Twitter account\n    \u003cspan\u003eThen\u003c/span\u003e User.count should \u003d\u003d 1\n    \u003cspan\u003eThen\u003c/span\u003e Authentication.count should \u003d\u003d 2\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\n\u003cspan\u003e...\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe're just want to check to make sure that we have only one User record and 2 Authentication records.  (This is kind of crude, and generally not something you'd do in a cucumber test, but it's a nice quick and dirty way to test my hunch. And it's better than having the test visit an admin portal to find out the number of users…  :P )\u003c/p\u003e\n\n\u003cp\u003eNow running cucumber we can see that my hunch is correct.\u003c/p\u003e\n\n\u003cpre\u003e...\n    Then User.count should \u003cspan\u003e\u003d\u003d\u003c/span\u003e 1 \u003cspan\u003e# features/step_definitions/users_steps.rb:43\u003c/span\u003e\n      expected: 1\n           got: 2 \u003cspan\u003e(\u003c/span\u003eusing \u003cspan\u003e\u003d\u003d)\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:14:in \u003cspan\u003e`\u003c/span\u003eThen User.count should \u003cspan\u003e\u003d\u003d\u003c/span\u003e 1\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eWe're ending up with 2 Users instead of just one.  So, we'll need to alter the OmniAuth callback to handle the case when the user is already logged in but wants to add an additional auth provider.  The \u003ccode\u003eSessionsController#create\u003c/code\u003e action is handling the auth provider callbacks, so we'll need to start by looking there.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n    \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n    \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe only difference we need here is to pass in the \u003ccode\u003ecurrent_user\u003c/code\u003e to \u003ccode\u003eAuthentication.from_omniauth\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we need to update \u003ccode\u003efrom_omniauth\u003c/code\u003e to deal with the current user if present.  We also need to remove the line from \u003ccode\u003ecreate_from_omniauth\u003c/code\u003e where we create a new \u003ccode\u003eUser\u003c/code\u003e for each new \u003ccode\u003eAuthentication\u003c/code\u003e.  Here's the new code for both methods.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eauth\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eslice\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e)).\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enil?\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enil?\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:name\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\n    \u003cspan\u003eelsif\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epresent?\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enil?\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n    \u003cspan\u003eauth\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003einfo\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003erescue\u003c/span\u003e \u003cspan\u003e\"\"\u003c/span\u003e\n    \u003cspan\u003ecreate!\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euid\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we're back to the stage where we should be seeing \"Would you like to make this public?\".\u003c/p\u003e\n\n\u003ch2\u003eStay tuned.\u003c/h2\u003e\n\n\u003cp\u003eIt's starting to get late, so that's going to be the end of it for tonight.  In the next installment we'll finish this feature.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - Omniauth Local Setup","link":"http://www.octolabs.com/blogs/octoblog/2014/01/06/techlahoma_omniauth_local_setup/","author":"Article Author","publishedDate":"Sun, 05 Jan 2014 16:00:00 -0800","contentSnippet":"In previous posts we looked at creating the Techlahoma app and writing a few Cucumber feature scenarios, writing the first step ...","content":"\u003cp\u003e\u003cspan\u003eIn previous posts we looked at \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/27/rails_new_techlahoma\"\u003ecreating the Techlahoma app and writing a few Cucumber feature scenarios\u003c/a\u003e\u003cspan\u003e, \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/28/techlahoma_1st_step_definitions\"\u003ewriting the first step definitions to make the Cucumber scenarios pass\u003c/a\u003e\u003cspan\u003e, and \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/30/techlahoma_omniauth_ftw\"\u003eintegrating OmniAuth to allow us to delegate authentication to 3rd parties like GitHub and Twitter\u003c/a\u003e\u003cspan\u003e. Today I’m going to set up my local environment with GitHub and Twitter integrations to complete the user sign in experience.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the last post we configured OmniAuth to look for some configuration info in environment variables.  For GitHub, for example, we're looking at \u003ccode\u003eENV['GITHUB_CONSUMER_KEY']\u003c/code\u003e and \u003ccode\u003eENV['GITHUB_CONSUMER_SECRET']\u003c/code\u003e.  I'm going to use \u003ca href\u003d\"https://github.com/ddollar/foreman\"\u003eForeman\u003c/a\u003e to handle the job of setting up environment variable and starting local services.\u003c/p\u003e\n\n\u003cp\u003eFirst we need a \u003ccode\u003eProcfile\u003c/code\u003e to tell \u003ccode\u003eforeman\u003c/code\u003e how to start a local web worker.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eweb: \u003c/span\u003e\u003cspan\u003erails\u003c/span\u003e \u003cspan\u003es\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow to start a local server instead of running \u003ccode\u003erails s\u003c/code\u003e I can use \u003ccode\u003eforeman start\u003c/code\u003e.  This same command will also start any background process that we may eventually add, and it will set up the environment variables that we need for 3rd part auth.\u003c/p\u003e\n\n\u003cp\u003eNext we need to create a file called \u003ccode\u003e.env\u003c/code\u003e in the main project directory.  We'll also add it to \u003ccode\u003e.gitignore\u003c/code\u003e since it will contain info that we don't want to be a part of the public repo.\u003c/p\u003e\n\n\u003cpre\u003etouch .env\n\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\".env\"\u003c/span\u003e \u0026gt;\u0026gt; .gitignore\n\u003c/pre\u003e\n\u003cp\u003eNow, to get the tokens for GitHub I went to the \u003ca href\u003d\"https://github.com/settings/applications/new\"\u003eNew OAuth Application Page\u003c/a\u003e and entered \"Techlahoma Devel\" as the name of the app, \u003ccode\u003ehttp://localhost:3000/\u003c/code\u003e as the application home page and \u003ccode\u003ehttp://localhost:3000/auth/github/callback\u003c/code\u003e as the callback URL.  Then I took the \"Client ID\" and \"Client Secret\" and added them to the \u003ccode\u003e.env\u003c/code\u003e file like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGITHUB_CONSUMER_KEY\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientID\u003c/span\u003e\n\u003cspan\u003eGITHUB_CONSUMER_SECRET\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientSecret\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow I can use \u003ccode\u003eforeman start\u003c/code\u003e to start my local server, visit the sign in page and click on \"Sign in with GitHub\".  Then I'm redirected to GitHub and show a page that tells me that \"Techlahoma Devel\" is requesting some information.  Clicking the \"Allow Access\" button redirects me back to my local machine and I can see in the header of the page that I'm logged in.  Woot!\u003c/p\u003e\n\n\u003cp\u003eNow to set up Twitter I go to the \u003ca href\u003d\"https://dev.twitter.com/apps/new\"\u003eCreate an applicaton page\u003c/a\u003e and create another \"Techlahoma Devel\" application.  Unfortunately Twitter doesn't recognize \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e as a valid URL format.  I use \u003ca href\u003d\"https://forwardhq.com/\"\u003eForward\u003c/a\u003e to (selectively) allow public access to my local development server.  So, I went into the techlahoma app dir and ran \u003ccode\u003eforward 3000\u003c/code\u003e.  This gives me a publicly accessible url that I can use for the application home page and callback URL.\u003c/p\u003e\n\n\u003cp\u003eNow I add the Client ID and Client Secret to the \u003ccode\u003e.env\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eTWITTER_CONSUMER_KEY\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientID\u003c/span\u003e\n\u003cspan\u003eTWITTER_CONSUMER_SECRET\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientSecret\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd add a \"Sign in with Twitter\" link to \u003ccode\u003eapp/views/sessions/new.html.erb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With Twitter\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/twitter\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow I can sign in with Twitter.  Hooray!\u003c/p\u003e\n\n\u003cp\u003eNext time we'll write some feature scenarios to allow a user to add multiple authentication providers to their account.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - OmniAuth FTW!","link":"http://www.octolabs.com/blogs/octoblog/2013/12/30/techlahoma_omniauth_ftw/","author":"Article Author","publishedDate":"Sun, 29 Dec 2013 16:00:00 -0800","contentSnippet":"In the last post we created step definitions for the first part of a sign in scenario, and we got as far as adding a dead \"Sign ...","content":"\u003cp\u003eIn the \u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/28/techlahoma_1st_step_definitions\"\u003elast post\u003c/a\u003e we created step definitions for the first part of a sign in scenario, and we got as far as adding a dead \"Sign In\" link to the page.  Now we're ready to actually build the sign in system.  We've decided that we do not want to be storing passwords in our system, instead we'll depend on 3rd party authentication providers, namely GitHub and Twitter to start.  \u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href\u003d\"https://github.com/intridea/omniauth\"\u003eOmniAuth\u003c/a\u003e is a great gem that handles most of the work of delegating authentication.  The \u003ca href\u003d\"http://railscasts.com/episodes/241-simple-omniauth\"\u003eSimple OmniAuth RailsCast\u003c/a\u003e has a great overview of getting started with OmniAuth.  We're going to use a slightly modified version of the approach in the RailsCast.  \u003c/p\u003e\n\n\u003cp\u003eWe want to allow a user to connect both their Twitter account and their GitHub account, and potentially other providers down the road.  So, we'll have the standard \u003ccode\u003eUser\u003c/code\u003e model that will represent an individual, and then we'll have an \u003ccode\u003eAunthentication\u003c/code\u003e model that will represent one linked account.  When a signed out user authenticates through one of the providers for the first time, we'll create an \u003ccode\u003eAuthentication\u003c/code\u003e record for that provider, and also a \u003ccode\u003eUser\u003c/code\u003e record to represent the individual.  Then we'll prompt them to link other accounts.  Each new linked account will result in a new \u003ccode\u003eAuthentication\u003c/code\u003e record linked to that \u003ccode\u003eUser\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGetting started\u003c/h3\u003e\n\n\u003cp\u003eTo follow BDD/TDD best practices, let's just start with the next step definition that we need to implement. \u003ccode\u003eWhen he signs in with GitHub\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis sounds like a simple step, but it's actually going to be comprised of a few steps.  For simplicity of UI, we'll want to have a single \"Sign In\" link in the header of the site.  When that is clicked the user should be presented with the available auth providers so that they can choose which one to use.  In this case we'll assume that they choose to authenticate through GitHub.\u003c/p\u003e\n\n\u003cp\u003eFirst let's use this as the step definition\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he signs in with GitHub$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n  \u003cspan\u003epage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e \u003cspan\u003ehave_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when we run Cucumber we see this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber features/users/signin.feature -r features/\nUsing the default profile...\nFeature: Sign In\n  As a visiting user\n  I want to sign \u003cspan\u003ein\n  \u003c/span\u003eSign \u003cspan\u003ein \u003c/span\u003ewill happen via GitHub \u003cspan\u003e(\u003c/span\u003eand possibly other auth providers\u003cspan\u003e)\u003c/span\u003e\n\n  Scenario: Sucessful sign \u003cspan\u003ein\u003c/span\u003e     \u003cspan\u003e# features/users/signin.feature:6\u003c/span\u003e\n    Given a signed out user       \u003cspan\u003e# features/step_definitions/users_steps.rb:1\u003c/span\u003e\n    When he visits the home page  \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e  \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Sign In Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:10:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n    Then he should see \"Sign Out\" # features/step_definitions/users_steps.rb:9\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThe error message shows that we're still viewing our \u003ccode\u003ehome/index.html.erb\u003c/code\u003e template.  That's because the \"Sign In\" link is still empty.  We need to point that link somewhere, so let's create a \u003ccode\u003eSessionsController\u003c/code\u003e to handle prompting the user for a new session and creating the session when the auth provider returns. We'll tell the generator that we want a \u003ccode\u003enew\u003c/code\u003e action including a template.\u003c/p\u003e\n\n\u003cpre\u003erails g controller sessions new\n\u003c/pre\u003e\n\u003cp\u003eAlso add this line to \u003ccode\u003econfig/routes.rb\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"signin\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"sessions#new\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:as\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:signin\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen update the \u003ccode\u003eviews/layouts/_header.html.erb\u003c/code\u003e template to point to the real sign in page.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esignin_path\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we can add an empty \"Sign In With GitHub\" link to \u003ccode\u003eviews/sessions/new.html.erb\u003c/code\u003e and our current step definition will pass, but we'll get an error that the \"Sign Out\" link has not appeared.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"#\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eOmniAuth\u003c/h3\u003e\n\n\u003cp\u003eNow we need to add OmniAuth to the \u003ccode\u003eGemfile\u003c/code\u003e. Since we need strategies for GitHub and Twitter, we can just include those gems, and they'll include OmniAuth itself as a dependency.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e\"omniauth-github\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026quot;~\u0026gt; 1.1.1\u0026quot;\u003c/span\u003e\n\u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e\"omniauth-twitter\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026quot;~\u0026gt; 1.0.1\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen run \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow we can change the link to point to \u003ccode\u003e/auth/github\u003c/code\u003e and OmniAuth with take care of the rest.  We'll also add a link to the built in 'developer' strategy that comes with omni-auth.  This is handy for local testing so that you don't have to set up GitHub or Twitter integration yet.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/github\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproduction?\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;br\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With Developer\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/developer\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eBut now Cucumber will fail, saying that there's no route for \u003ccode\u003e/auth/github\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e...\n  When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/auth/github\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:10:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThis is because we haven't configured OmniAuth yet.  Put this at \u003ccode\u003econfig/initilizers/omniauth.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eapplication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emiddleware\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBuilder\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e:developer\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproduction?\u003c/span\u003e\n  \u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e:twitter\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'TWITTER_CONSUMER_KEY'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'TWITTER_CONSUMER_SECRET'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e:github\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'GITHUB_CONSUMER_KEY'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'GITHUB_CONSUMER_SECRET'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe also need to setup OmniAuth for testing.  Add this to \u003ccode\u003efeatures/support/omniauth.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eBefore\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'@omniauth_test'\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etest_mode\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n \n  \u003cspan\u003e# the symbol passed to mock_auth is the same as the name of the provider set up in the initializer\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emock_auth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:github\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"github\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"abc123\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\"email\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"test@xxxx.com\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"first_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"last_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"User\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test User\"\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emock_auth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:twitter\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"twitter\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"def456\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\"email\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"test@xxxx.com\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"first_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"last_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"User\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test User\"\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eend\u003c/span\u003e\n \n\u003cspan\u003eAfter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'@omniauth_test'\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etest_mode\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen we need to update the feature file (\u003ccode\u003efeatures/users/signin.feature\u003c/code\u003e) to indicate that the sing in test is an \u003ccode\u003e@omniauth_test\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sign In\n  As a visiting user\n  I want to sign in\n  Sign in will happen via GitHub (and possibly other auth providers)\n\n  @omniauth_test\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sucessful sign in\n    \u003cspan\u003eGiven\u003c/span\u003e a signed out user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he signs in with GitHub\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n\n\u003cspan\u003e...\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow Cucumber will complain about a missing route for \u003ccode\u003e/auth/github/callback\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e...\n    When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/auth/github/callback\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:11:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n\u003c/span\u003e\u003c/pre\u003e\u003cp\u003eThis means that OmniAuth is properly simulating the \"OAuth Dance\" with GitHub and is now ready for the application to handle an authenticated user.  Now we need to add handling for that route and point it to \u003ccode\u003eSessionsController#new\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e# add to config/routes.rb\u003c/span\u003e\n\u003cspan\u003ematch\u003c/span\u003e \u003cspan\u003e\"/auth/:provider/callback\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"sessions#create\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:via\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:get\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:post\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eGenerate the models\u003c/h3\u003e\n\n\u003cp\u003eBefore we can implement the session handling we're going to need models to represent the \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eAuthentication\u003c/code\u003e.  Let's generate the models and run the DB migrations.\u003c/p\u003e\n\n\u003cpre\u003erails g model user name:string\nrails g model authentication user_id:integer provider:string uid:string name:string\nrake db:migrate; rake db:test:prepare;\n\u003c/pre\u003e\u003cp\u003eWe can also set up the relationship between the models.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActiveRecord\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003ebelongs_to\u003c/span\u003e \u003cspan\u003e:user\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActiveRecord\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003ehas_many\u003c/span\u003e \u003cspan\u003e:authentications\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eCreating a Session\u003c/h3\u003e\n\n\u003cp\u003eNow we can get back to creating the user session.  Handling the info that we get back from OmniAuth is potentially messy, so in order to keep the controller code nice and light, let's use a \u003ccode\u003efrom_omniauth\u003c/code\u003e method on the \u003ccode\u003eAuthentication\u003c/code\u003e class to handle looking up or creating an \u003ccode\u003eAuthentication\u003c/code\u003e based on the OAuth info.  Then we'll grab the \u003ccode\u003eUser\u003c/code\u003e for that \u003ccode\u003eAuthentication\u003c/code\u003e. So the \u003ccode\u003ecreate\u003c/code\u003e method on \u003ccode\u003eSessionsController\u003c/code\u003e looks like this.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eprotect_from_forgery\u003c/span\u003e \u003cspan\u003e:except\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:create\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n  \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n  \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n  \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003efrom_omniauth\u003c/code\u003e method, we're just going to return the first Authentication that matches the provider and uid, or create a new one.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActiveRecord\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003ebelongs_to\u003c/span\u003e \u003cspan\u003e:user\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\n    \u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eslice\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e)).\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003einfo\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003erescue\u003c/span\u003e \u003cspan\u003e\"\"\u003c/span\u003e\n    \u003cspan\u003ecreate!\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euid\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:name\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we'll actually be logged in, but Cucumber still isn't happy because we haven't added the \"Sign Out\" link to the page.\u003c/p\u003e\n\n\u003cp\u003eFirst we'll add a helper function that will give us easy access to the currently signed in user.  How about we call it \u003ccode\u003ecurrent_user\u003c/code\u003e?\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003e# Prevent CSRF attacks by raising an exception.\u003c/span\u003e\n  \u003cspan\u003e# For APIs, you may want to use :null_session instead.\u003c/span\u003e\n  \u003cspan\u003eprotect_from_forgery\u003c/span\u003e \u003cspan\u003ewith: :exception\u003c/span\u003e\n\n  \u003cspan\u003ehelper_method\u003c/span\u003e \u003cspan\u003e:current_user\u003c/span\u003e\n\n  \u003cspan\u003eprivate\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\n    \u003cspan\u003e@current_user\u003c/span\u003e \u003cspan\u003e||\u003d\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we can update the \u003ccode\u003eapp/views/layouts/_header.html.erb\u003c/code\u003e partial to have a sign out link.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  Welcome \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e!\n  \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esignout_path\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esignin_path\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003esignout_path\u003c/code\u003e doesn't exist yet, so we need to add a route to \u003ccode\u003econfig/routes.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"signout\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"sessions#destroy\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:as\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:signout\u003c/span\u003e\n\u003c/pre\u003e\u003cp\u003eAnd we need to add the \u003ccode\u003edestroy\u003c/code\u003e method to \u003ccode\u003eSessionsController\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edestroy\u003c/span\u003e\n  \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\n  \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed out!\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd that's it! Kind of. Not really….\u003c/p\u003e\n\n\u003cp\u003eNow a user can sign in through a single provider, but they can't yet connect multiple accounts.\u003c/p\u003e\n\n\u003cp\u003eNext time we'll look at allowing multiple connections as well as smoothing out some of the existing rough spots.  We'll also cover getting environment variables set up correctly to allow local testing of the GitHub integration.  Right now things only work with the simulated OAuth dance inside of Cucumber.  \u003c/p\u003e\n\n\u003cp\u003eAs always feel free to check out the \u003ca href\u003d\"https://github.com/techlahoma/techlahoma\"\u003eTechlahoma code in\nprogress\u003c/a\u003e and don't hesitate to contact us or submit a pull request if you'd like to get involved.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - 1st Step Definitions","link":"http://www.octolabs.com/blogs/octoblog/2013/12/28/techlahoma_1st_step_definitions/","author":"Article Author","publishedDate":"Fri, 27 Dec 2013 16:00:00 -0800","contentSnippet":"Today I'm going to document the process of building the first step\ndefinitions for Techlahoma.  This will turn the Cucumber ...","content":"\u003cp\u003eToday I'm going to document the process of building the first step\ndefinitions for Techlahoma.  This will turn the Cucumber stories that we\nbuilt in \u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/27/rails_new_techlahoma\"\u003epart 1\u003c/a\u003e into runnable test scenarios.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eIn part 1 we saw that Cucumber will give you stubs for your method definitions when you run Scenarios that are missing them.  So, to get started I just created a file at \u003ccode\u003efeatures/step_definitions/user_steps.rb\u003c/code\u003e and I pasted in the stubs that Cucumber provided.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a signed out user$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he visits the home page$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eThen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he should see \"(.*?)\"$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003earg1\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he signs in$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he fails the signs in$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a signed in user$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he signs out$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he fails the sign out$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when I run the sign in feature I can see that Cucumber is finding the step definitions and knows that they are still pending.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber features/users/signin.feature -r features/\nUsing the default profile...\nFeature: Sign In\n  As a visiting user\n  I want to sign \u003cspan\u003ein\n  \u003c/span\u003eSign \u003cspan\u003ein \u003c/span\u003ewill happen via GitHub \u003cspan\u003e(\u003c/span\u003eand possibly other auth providers\u003cspan\u003e)\u003c/span\u003e\n\n  Scenario: Sucessful sign \u003cspan\u003ein\u003c/span\u003e     \u003cspan\u003e# features/users/signin.feature:6\u003c/span\u003e\n    Given a signed out user       \u003cspan\u003e# features/step_definitions/users_steps.rb:1\u003c/span\u003e\n      TODO \u003cspan\u003e(\u003c/span\u003eCucumber::Pending\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:7:in \u003cspan\u003e`\u003c/span\u003eGiven a signed out user\u003cspan\u003e'\n    When he visits the home page  # features/step_definitions/users_steps.rb:5\n    Then he should see \"Sign In\"  # features/step_definitions/users_steps.rb:9\n    When he signs in with GitHub  # features/step_definitions/users_steps.rb:13\n    Then he should see \"Sign Out\" # features/step_definitions/users_steps.rb:9\n\n  Scenario: Failed sign in                # features/users/signin.feature:13\n    Given a signed out user               # features/step_definitions/users_steps.rb:1\n      TODO (Cucumber::Pending)\n      features/users/signin.feature:14:in `Given a signed out user'\u003c/span\u003e\n    When he visits the home page          \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e          \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    When he fails the sign \u003cspan\u003ein \u003c/span\u003ewith GitHub \u003cspan\u003e# features/step_definitions/users_steps.rb:17\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e          \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e            \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n\n2 scenarios \u003cspan\u003e(\u003c/span\u003e2 pending\u003cspan\u003e)\u003c/span\u003e\n11 steps \u003cspan\u003e(\u003c/span\u003e9 skipped, 2 pending\u003cspan\u003e)\u003c/span\u003e\n0m0.138s\n\u003c/pre\u003e\n\u003cp\u003eNow we're ready to start filling out the step definitions. Let's just step through the first few and start making them pass.\u003c/p\u003e\n\n\u003cp\u003eThe first one is easy.  There is nothing to do, so we can just remove the \u003ccode\u003epending\u003c/code\u003e call, and add a comment noting that the step is intentionally blank.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a signed out user$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003e# this doesn't need any explicit action\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe next one is pretty straight forward.  Cucumber wraps Capybara, so inside the step definitions we can use standard Capybara syntax.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he visits the home page$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eFor the \u003ccode\u003eThen he should see \"Sign In\"\u003c/code\u003e step, we can use regular expressions to generalize that step.  This means that we can reuse this step definition for any text that we want to locate on the page.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eThen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he should see \"(.*?)\"$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003epage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e \u003cspan\u003ehave_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eshould\u003c/code\u003e syntax requires rspec, so add it to the \u003ccode\u003e:test\u003c/code\u003e group in \u003ccode\u003eGemfile\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e\"rspec-rails\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026quot;~\u0026gt; 2.14.0\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen do a quick \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow the sign in feature will pass the first step (doing nothing), but will fail at visiting the home page.\u003c/p\u003e\n\n\u003cpre\u003e...\n    When he visits the home page  \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:8:in \u003cspan\u003e`\u003c/span\u003eWhen he visits the home page\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThe visit to the home page is failing because we haven't set up a root route for the app yet.  That can be handled by generating a controller and setting it to be the root.\u003c/p\u003e\n\n\u003cp\u003eFirst generate a home controller.\u003c/p\u003e\n\n\u003cpre\u003erails g controller home index\n\u003c/pre\u003e\n\u003cp\u003eThen open \u003ccode\u003econfig/routes.rb\u003c/code\u003e and add a line to set it as the root route.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eroot\u003c/span\u003e \u003cspan\u003e\"home#index\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow cucumber will fail with a different error.\u003c/p\u003e\n\n\u003cpre\u003e...\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e  \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Sign In\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:9:in \u003cspan\u003e`\u003c/span\u003eThen he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThe test for the \"Sign In\" link is failing because we haven't added that to the page yet.  This is something that we'll want to be on every page, so in the layout right before the \u003ccode\u003eyield\u003c/code\u003e add this line.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003erender\u003c/span\u003e \u003cspan\u003e'layouts/header'\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen create a file at \u003ccode\u003eviews/layouts/_header.html.erb\u003c/code\u003e with this content.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"#\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eFor now we're just doing the minimum needed to make the currently failing step pass.  As we work through the other steps we'll flesh out this template to be more realistic.\u003c/p\u003e\n\n\u003cp\u003eNow the first three steps of the sign in feature are passing.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber features/users/signin.feature -r features/\nUsing the default profile...\nFeature: Sign In\n  As a visiting user\n  I want to sign \u003cspan\u003ein\n  \u003c/span\u003eSign \u003cspan\u003ein \u003c/span\u003ewill happen via GitHub \u003cspan\u003e(\u003c/span\u003eand possibly other auth providers\u003cspan\u003e)\u003c/span\u003e\n\n  Scenario: Sucessful sign \u003cspan\u003ein\u003c/span\u003e     \u003cspan\u003e# features/users/signin.feature:6\u003c/span\u003e\n    Given a signed out user       \u003cspan\u003e# features/step_definitions/users_steps.rb:1\u003c/span\u003e\n    When he visits the home page  \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e  \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      TODO \u003cspan\u003e(\u003c/span\u003eCucumber::Pending\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:10:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n    Then he should see \"Sign Out\" # features/step_definitions/users_steps.rb:9\n\n  Scenario: Failed sign in                # features/users/signin.feature:13\n    Given a signed out user               # features/step_definitions/users_steps.rb:1\n    When he visits the home page          # features/step_definitions/users_steps.rb:5\n    Then he should see \"Sign In\"          # features/step_definitions/users_steps.rb:9\n    When he fails the sign in with GitHub # features/step_definitions/users_steps.rb:17\n      TODO (Cucumber::Pending)\n      features/users/signin.feature:17:in `When he fails the sign in with GitHub'\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e          \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e            \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n\n2 scenarios \u003cspan\u003e(\u003c/span\u003e2 pending\u003cspan\u003e)\u003c/span\u003e\n11 steps \u003cspan\u003e(\u003c/span\u003e3 skipped, 2 pending, 6 passed\u003cspan\u003e)\u003c/span\u003e\n0m0.180s\n\u003c/pre\u003e\n\u003cp\u003eNow we're ready to actually log the user in, but that's big enough for a post of its own.  Next time we'll look at using omniauth to handle authenticating a user through GitHub and Twitter.\u003c/p\u003e\n\n\u003cp\u003eYou're welcome to \u003ca href\u003d\"https://github.com/techlahoma/techlahoma\"\u003echeck out the\nrepo\u003c/a\u003e, and if you'd like to get involved we love pull requests.\u003c/p\u003e","categories":[]},{"title":"rails new techlahoma","link":"http://www.octolabs.com/blogs/octoblog/2013/12/27/rails_new_techlahoma/","author":"Article Author","publishedDate":"Thu, 26 Dec 2013 16:00:00 -0800","contentSnippet":"Rob Sullivan and Amanda Harlin have been kicking around ideas for something called Techlahoma and they recently asked me to get ...","content":"\u003cp\u003e\u003ca href\u003d\"https://twitter.com/DataChomp\"\u003eRob Sullivan\u003c/a\u003e and \u003ca href\u003d\"https://twitter.com/amandaharlin\"\u003eAmanda Harlin\u003c/a\u003e have been kicking around ideas for something called Techlahoma and they recently asked me to get involved to help.  We decided early on that the app would be a Rails project, and I suggested that we use Cucumber to describe the main user features that we hope to build.  In the early stages these stories will act as our design document, allowing us to formally capture the description of the features that will be available to end users.  These documents will live in the project repo, and will be just like any other code/text file.  We'll be able to track the history of feature descriptions, make drastic changes to them without fear of losing previous work, use pull requests to initiate discussion about new features, and all of the other great benefits that you get with git and GitHub.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eI had the honor of generating the new app, so here I'm going to document the steps that I took to start the project and build the first few Cucumber scenarios.\u003c/p\u003e\n\n\u003cp\u003eFirst I generated a new rails app, using postgres as the DB and using the \u003ccode\u003e-T\u003c/code\u003e option to skip \u003ccode\u003eTest::Unit\u003c/code\u003e.  Then I immediately initialized the project directory as a git repo, added all of the app files to the repo, committed and pushed.\u003c/p\u003e\n\n\u003cpre\u003erails new techlahoma -d postgresql -T\n\u003cspan\u003ecd \u003c/span\u003etechlahoma\ngit init .\ngit add .\ngit commit -m \u003cspan\u003e\"Initial rails app\"\u003c/span\u003e\ngit remote add origin git@github.com:techlahoma/techlahoma.git\ngit push -u origin master\n\u003c/pre\u003e\n\u003cp\u003eThen I added a couple of gems to the \u003ccode\u003eGemfile\u003c/code\u003e for running cucumber.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003egroup\u003c/span\u003e \u003cspan\u003e:test\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e'cucumber-rails'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:require\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n  \u003cspan\u003e# database_cleaner is not required, but highly recommended\u003c/span\u003e\n  \u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e'database_cleaner'\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen a quick \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen I installed the cucumber configuration and skeleton.\u003c/p\u003e\n\n\u003cpre\u003erails generate cucumber:install \n\u003c/pre\u003e\n\u003cp\u003eNow I'm ready to run cucumber!\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber \nUsing the default profile...\n0 scenarios\n0 steps\n0m0.000s\n\u003c/pre\u003e\u003cp\u003eCucumber is running, but I don't have any scenarios ready to run.  Let's fix that.  One of the features that we know we want to have is the ability for users to sign in and out.  So, I'm going to start there with a feature description.  First let's look at the feature files themselves, and then I'll describe their structure.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efeatures/users/sign_in.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sign In\n  As a visiting user\n  I want to sign in\n  Sign in will happen via GitHub (and possibly other auth providers)\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sucessful sign in\n    \u003cspan\u003eGiven\u003c/span\u003e a signed out user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e \u003cspan\u003e# A link on the page\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he signs in\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e  \u003cspan\u003e# A link on the page\u003c/span\u003e\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Failed sign in\n    \u003cspan\u003eGiven\u003c/span\u003e a signed out user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he fails the signs in\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003efeatures/users/sign_out.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sign Out\n  As a signed in user\n  I want to sign out\n  To protect my account stuff\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Successful sign out\n    \u003cspan\u003eGiven\u003c/span\u003e a signed in user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he signs out\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Failed sign out\n    \u003cspan\u003eGiven\u003c/span\u003e a signed in user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he fails the sign out\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAs you can see, these feature files have two main parts.  \u003ccode\u003eFeature\u003c/code\u003e and \u003ccode\u003eScenario\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eFeature\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eFeature\u003c/code\u003e section is only for humans, and is meant to be a high level description of the complete feature or feature set in question.  In this part you're not describing specific use cases or sequences of events, you're just describing the purpose of the feature, and the \"business case\" for why it exists in the first place.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eScenario\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eScenario\u003c/code\u003e sections are also for humans, but they're for computers too.  These are descriptions of specific sequences of events that should happen within the app, and the results that should occur with those events.  Generally you'll have a \u003ccode\u003eScenario\u003c/code\u003e section for each branch, or edge case that your code will need to cover.  You want to keep these descriptions still at a pretty high level, and you don't want to get into the minutia of dealing directly with UI elements.  Notice that the scenarios above have only a single line for something like \u003ccode\u003eWhen he signs in\u003c/code\u003e.  \u003ccode\u003eScenario\u003c/code\u003e sections generally should not contain things like \"she clicks on the 'sign in' link\" or \"she enters her email address\".  These kind of details will be handled later in the step definitions, which is the code that Cucumber will actually run in order to execute these \u003ccode\u003eScenario\u003c/code\u003es as live test code.  \u003c/p\u003e\n\n\u003cp\u003eNow when I run cucumber I see that it's trying to execute my \u003ccode\u003eScenario\u003c/code\u003es but that it can't find step definitions for them.  Handily it provides stubs for the missing step definitions.\u003c/p\u003e\n\n\u003cpre\u003e4 scenarios \u003cspan\u003e(\u003c/span\u003e4 undefined\u003cspan\u003e)\u003c/span\u003e\n22 steps \u003cspan\u003e(\u003c/span\u003e22 undefined\u003cspan\u003e)\u003c/span\u003e\n0m0.212s\n\nYou can implement step definitions \u003cspan\u003efor \u003c/span\u003eundefined steps with these snippets:\n\nGiven\u003cspan\u003e(\u003c/span\u003e/^a signed out users\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he visits the home page\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nThen\u003cspan\u003e(\u003c/span\u003e/^he should see \u003cspan\u003e\"(.*?)\"\u003c/span\u003e\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e |arg1|\n  pending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he signs \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he fails the signs \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nGiven\u003cspan\u003e(\u003c/span\u003e/^a signed \u003cspan\u003ein \u003c/span\u003euser\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he signs out\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he fails the sign out\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\u003c/pre\u003e\n\u003ch2\u003eBrainstorming\u003c/h2\u003e\n\n\u003cp\u003eThe great thing about cucumber files is that you can start will just the \u003ccode\u003eFeature\u003c/code\u003e section and allow it to act like a design document of sorts where you capture general ideas about the new feature that's being discussed.  I know that one of the things we'd like to include is the ability for companies to maintain a profile that contains some basic information about the company.  I'm not entirely sure what all we want to include there, so for now I'm going to start with a some basic feature files that just take a stab at describing things that might fit into this feature set.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efeatures/company_profiles/create.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Company Profiles\n  As a company owner/operator\n  I want to create a profile for my company\n  So that local developers can learn about me\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003efeatures/company_profiles/tags.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Tags for Companies\n  As a local developer\n  I want to be able to filter companies based on technologies being used\n  So that I can find places where my skills can be put to use\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003efeatures/company_profiles/freelancers.features\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Freelancer Profiles\n  As a local freelancer\n  I want to create a profile for myself\n  So that local companies can contact me if they could use my skills\n\u003c/pre\u003e\n\u003cp\u003eThese files aren't yet executable by Cucumber, but they're a great starting point for discussion about what we want to have happen here.  We can use them to flush out the ideas and zero in on the requirements.  As that happens usage scenarios will begin to emerge and we'll write a \u003ccode\u003eScenario\u003c/code\u003e section for each use case that we want to consider.\u003c/p\u003e\n\n\u003cp\u003eIn a later installment we'll look at starting to implement some step definitions for scenarios to turn these feature files into fully executable tests.\u003c/p\u003e\n\n\u003cp\u003eIn the mean time you can \"check out the techlahoma repo\":https://github.com/techlahoma/techlahoma and don't hesitate to send over some pull requests if you'd like to get involved.\u003c/p\u003e","categories":[]}]}}, "responseDetails": null, "responseStatus": 200};
var dataChompMock = {"responseData": {"feed":{"feedUrl":"http://datachomp.com/atom.xml","title":"DataChomp","link":"http://datachomp.com/","author":"Rob Sullivan","description":"","type":"atom10","entries":[{"title":"I am A bad blogger","link":"http://datachomp.com/archives/i-am-a-bad-blogger/","author":"","publishedDate":"Mon, 06 Jan 2014 14:43:00 -0800","contentSnippet":"I’ve never really thought about how bad of a blogger I am. I mean, I always knew deep in my heart I wasn’t very good, but a few ...","content":"\u003cp\u003eI’ve never really thought about how bad of a blogger I am. I mean, I always knew deep in my heart I wasn’t very good, but a few conversations over the past few months have really solidified just how bad I am. My confession begins.\u003c/p\u003e\n\n\u003ch4\u003eSome Person in Somalia has Your Content\u003c/h4\u003e\n\n\u003cp\u003eOver the years, I’ve seen a lot of emotional breakdowns and anger when someone sees their content reposted on bottom feeder sites. Some people have event pointed out to me when things from this blog appear on there. Each time this has happened, I’ve been unable to get angry or motivated enough to try to get it removed. I remember some people like Tom LaRock putting ridiculous\n“If you are not at thomaslarock.com, this material has been plagiarized by someone who steals content from others.” Tynt scripts into his publicly pasted query and just being bewildered by the drama surrounding these episodes. For this lack of sharing without conditions and unwillingness to feign vitriol at a bot, I’m a bad blogger.\u003c/p\u003e\n\n\u003ch4\u003eAlways Be Tweeting\u003c/h4\u003e\n\n\u003cp\u003eI don’t tweet or retweet my same entry multiple times a day. I blame this partly on the fact\nthat I’m not a consultant nor have the self esteem issues needed to shamelessly market and remarket myself over and over. Another thing I do very poorly is submit a post to Hacker News and then stand on the tweet corner begging for upvotes. Because of this lack of pandering and repetitious pollution, I am a bad blogger.\u003c/p\u003e\n\n\u003ch4\u003eThanks for Writing My Opinion\u003c/h4\u003e\n\n\u003cp\u003eme: ‘Your post isn’t any different than the press release.’\u003cbr\u003e\nblogger: “That is what they told us to say.”\u003cbr\u003e\nTo this day, the above conversation has never made sense to me. I’m always fascinated by people who do a repost of a marketing piece given to them and then celebrate what a prolific blogger they are. This apathy towards a raw number of blog posts as well as not being an echo chamber for a company on this blog is completely my fault and I apologize.\u003c/p\u003e\n\n\u003ch4\u003eA Number of Reasons\u003c/h4\u003e\n\n\u003cp\u003e“How many readers do you have?”, “How do you tweak your SEO?”, “How often do you reblog your most popular post?”, “What is your peak time of day to release content?” and on and on. Barf. Some people think I’m just joking when I say I have no idea on the above questions, but it’s the truth. More than pretty charts and clicks per minute, I tend to be more inspired by someone just saying ‘hey dude, I checked out that thing on pgbouncer and it worked for me.’ or being stuck on a smtp configuration in SSRS and searching this site for it. While this does cement that I’ll never be an elite blogger, it does let me take acceptance that I’m just a bad blogger.\u003c/p\u003e\n\n\u003ch4\u003eTruncate Table Opinions\u003c/h4\u003e\n\n\u003cp\u003eThere are a lot of reasons to blog, and for the most part mine are incredibly selfish. I blog to try to remember things, I blog so I can reference certain posts later… I blog to help put my thoughts into words and refine an opinion on something. The archive on this site might deceive you, but I tend to ‘blog’ at least once a week. A great majority of these never get published, but there is something therapeutic and reinforcing about writing something out or laying out a process into steps. If you want to get technical, you could say that I keep a journal that I sometimes publish out of and I wouldn’t fight you on it. When you stop caring about others opinions or turning things into a popularity contest, you might be surprised at how easy “blogging” starts to become and how helpful it get in an industry that doesn’t slow down.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThis was a 10 minute journal entry that I just sort of decided to hit publish on. Goal was to have something to link when I get stuck in these silly conversation.\u003c/li\u003e\n\u003cli\u003eFollowed by 30 minutes or so of fixing typos because I’m illiterate.\u003c/li\u003e\n\u003c/ul\u003e","categories":[]},{"title":"The AppDevs are idiots","link":"http://datachomp.com/archives/the-appdevs-are-idiots/","author":"","publishedDate":"Fri, 20 Dec 2013 21:28:00 -0800","contentSnippet":"In my many years of Enterprise DBA servitude, there would be many instances of blanket ‘the devs are idiots’ statements. ...","content":"\u003cp\u003eIn my many years of Enterprise DBA servitude, there would be many instances of blanket ‘the devs are idiots’ statements. Sometimes by me, sometimes by others and from the perspective of the database it was usually justifiable. In these enviornments, this is acceptable. I have no idea what busy work task they have come up with and why should I even care about anything out side of my database? These AppsDevs are disgusting dirty creatures that just sling filth everywhere as they stomp their hooves on the keyboard. Worthless.\u003c/p\u003e\n\n\u003ch4\u003eInner Joined at the Hip\u003c/h4\u003e\n\n\u003cp\u003eWhat I enjoy most about the above mindset is the expectation of the AppDev to know their job and be equally proficient at my own. They must be fluent in the language of Stored Procedures else everything collapses from the data hate speech that comes from their object-pooriented programs. I’ve often wondered where this one sidedness originated from. For a bit I thought it was just something that happened at places I worked. It’s not just there though. Check out your local communities and you’ll see the imbalance there as well. I attend both database user groups and developer based user groups. I often see a fair amount of AppDevs at sql events… I pretty much never see DBAs at developer events.\u003c/p\u003e\n\n\u003ch4\u003eCross Apply What You Know\u003c/h4\u003e\n\n\u003cp\u003eA few years back, I got involved in with a few open source .NET ORMs. It goes without saying that ORMs are the \u003ca href\u003d\"http://www.codinghorror.com/blog/2006/06/object-relational-mapping-is-the-vietnam-of-computer-science.html\"\u003eVietnam of the software world\u003c/a\u003e and I was pretty much blown away at how desperate these projects were for feedback. It was so easy and fun to help out and it totally changed my opinion of ORMs. It also changed my opinion of the curmudgeoned DBA. If you want some contrast/perspective, I’ve also helped out a few ‘open source’ database projects by their prefered method – email.\u003c/p\u003e\n\n\u003ch4\u003eRefactor the  Query\u003c/h4\u003e\n\n\u003cp\u003eThe more time you spend with AppDevs the more you realize just how many of them are stuck with really bad DBAs. Now when I hear DBAs complain I ask the following of them:\nWhat open source work do you do?\nWhat dev conferences do you attend with the team?\nWhat have you personally built?\nWhat source control do you use so that the team can see your scripts and ask about them?\u003c/p\u003e\n\n\u003cp\u003eYou don’t have to be Nostradamus to know how the people I’m talking about answer the above questions. Like so many things with humans, the loud ones with the most generic argument are typically doing the least to fix the problem. If you are an Oracle/SQL Server DBA, don’t just hide behind our industry specific firewalls – get out there. Engage the AppDevs, review their code, help some project, make your scripts public for them to see. We’ve sat in our foxholes long enough and the AppDevs are not our enemy. It’s our turn to build the bridge.\u003c/p\u003e","categories":[]},{"title":"Getting Started With PGBouncer","link":"http://datachomp.com/archives/getting-started-with-pgbouncer/","author":"","publishedDate":"Mon, 02 Dec 2013 20:00:00 -0800","contentSnippet":"One of the issues we face at Raisemore is a continuous flux in our number of connections to our primary Postgres database. If ...","content":"\u003cp\u003eOne of the issues we face at Raisemore is a continuous flux in our number of connections to our primary Postgres database. If our load increases and we have to spin up more front end servers or spin up more backend servers. This can quickly wreck our connection limit. One solution, is for me to babysit the connection size on the pg server itself… or perhaps I can give the Apps the middle finger and starve their connection limit – neither of these lead to happy outcomes for everyone involved.\u003c/p\u003e\n\n\u003ch3\u003eapt-get install happiness\u003c/h3\u003e\n\n\u003cp\u003eA better compromise is to just put a connection pooler like \u003ca href\u003d\"http://wiki.postgresql.org/wiki/PgBouncer\"\u003ePgBouncer\u003c/a\u003e in front of our postgres database. In the same way we proxy our applications with Nginx, we can apply the same concept to our database(s) with Pgbouncer. Let’s get started:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e--Assuming your pg database is already up and running\n--databasename \u003d burrito_hq  username \u003d elguapo\nsudo apt-get install -y pgbouncer\nsudo nano /etc/pgbouncer/userlist.txt\n\u0026gt; \u0026quot;postgres\u0026quot; \u0026quot;postgres\u0026quot;\n\u0026gt; \u0026quot;elguapo\u0026quot; \u0026quot;hefe\u0026quot;\nsudo nano /etc/pgbouncer/pgbouncer.ini\n\u0026gt; [databases]\n\u0026gt; burrito_hq \u003d host\u003dlocalhost port\u003d5432 dbname\u003dburrito_hq user\u003delguapo password\u003dhefe\n\u0026gt; [pgbouncer]\n\u0026gt; listen_addr \u003d *\n\u0026gt; auth_type \u003d md5\n\u0026gt; admin_users \u003d postgres\n\u0026gt; stats_users \u003d postgres\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAbove are some of the settings I changed to get started. As you get more familiar with Pgbouncer, change the \u003ca href\u003d\"http://pgbouncer.projects.pgfoundry.org/doc/config.html\"\u003evarious settings\u003c/a\u003e as you see fit and for your workload.\u003cbr\u003e\nLet’s test our settings by firing up PgBouncer. PgBouncer is closely tied to the postgres user on the server, so we’ll ‘switch user’ into the postgres account to crank it up:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003esudo su postgres -c\"pgbouncer -d /etc/pgbouncer/pgbouncer.ini\"\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOn our client machine, lets attempt a connection to our server which has an ip of 172.16.150.128:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003epsql -h 172.16.150.128 -p 6432 -U elguapo -d burrito_hq \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand hopefully we’re in!  Once we know our settings are in good shape, lets turn PgBouncer auto start mode on:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003esudo nano /etc/default/pgbouncer\n\u0026gt; START\u003d1\nsudo reboot #reboot the box to test it out\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen the server comes back online, hopefully you can connect again from the client. Now that the server is stable again, we can go get completely lost in the \u003ca href\u003d\"http://pgbouncer.projects.pgfoundry.org/doc/usage.html\"\u003edocumentation\u003c/a\u003e and let the tool really shine.\u003c/p\u003e","categories":[]},{"title":"heroku pg-extras builds bridges","link":"http://datachomp.com/archives/heroku-pg-extras-builds-bridges/","author":"","publishedDate":"Wed, 20 Nov 2013 17:10:00 -0800","contentSnippet":"It starts with the all too familiar “I think my database is running slow” and ends with the AppDev and myself speaking ...","content":"\u003cp\u003eIt starts with the all too familiar “I think my database is running slow” and ends with the AppDev and myself speaking different languages, yelling at each and saying hurtful things… all the while the app and db sit in their servers neglected and needing love.\u003c/p\u003e\n\n\u003ch3\u003epg_therapy\u003c/h3\u003e\n\n\u003cp\u003eWhile many of us that live in the database layer have tricked out \u003ca href\u003d\"https://github.com/datachomp/dotfiles/blob/master/.psqlrc\"\u003e.psqlrc\u003c/a\u003e files, I rarely find AppDevs with the same. Let me stress that this is perfectly ok!!! But having some really ugly diagnostic queries aliased in your .psqlrc is incredibly helpful. Majority of the AppDevs I talk to concerned about their db also happen to be running on Heroku. To accomodate its users, Heroku has put out a very helpful plugin to their toolbelt called \u003ca href\u003d\"https://github.com/heroku/heroku-pg-extras\"\u003epg-extras\u003c/a\u003e. I love this tool because it gets the AppDev and I on a common language. They don’t get scared by hairy SQL statement and it’s consistent from app to app. Check it out:\u003c/p\u003e\n\n\u003ch3\u003ePump you up\u003c/h3\u003e\n\n\u003cp\u003eInstallation is a breeze:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eheroku plugins:install git://github.com/heroku/heroku-pg-extras.git\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eUsing it a breeze:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eheroku pg:bloat  #one of my favorites!\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen I run that, it tells me that I didn’t specify a database:\u003cbr\u003e\n! Unknown database. Valid options are: HEROKU_POSTGRESQL_BLACK_URL, HEROKU_POSTGRESQL_PINK_URL\u003c/p\u003e\n\n\u003cp\u003eI run it again with the proper db:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eheroku pg:bloat HEROKU_POSTGRESQL_BLACK_URL\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow I have an easy to use snapshot of our database that has an incredibly low barrier of entry to execute for myself or anyone. Let’s say that the person running it doesn’t trust me or perhaps I’m in a burrito coma, they can always refer to the \u003ca href\u003d\"https://devcenter.heroku.com/articles/heroku-postgres-database-tuning\"\u003eheroku database tuning site\u003c/a\u003e and get sound information.\u003c/p\u003e\n\n\u003ch3\u003eDude, I don’t even have time for that.\u003c/h3\u003e\n\n\u003cp\u003eMaybe the above is a bit too much to stomach. That’s cool, we’ll just flip another easy switch:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eheroku addons:add librato\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ca href\u003d\"http://librato.com\"\u003eLibrato\u003c/a\u003e is a beautiful dashboard that is fun to look at, easy to use and will give us some historical context for troubleshooting the typically ill fated “I think my database is slow” situation. What is nice about tooling like Librato is not only does it show our db stats, we also get the context of the Application(Dyno’s, router latency, etc). For more information on this, checkout Craig Kerstiens post on \u003ca href\u003d\"https://postgres.heroku.com/blog/past/2013/10/9/monitoring_your_heroku_postgres_database/\"\u003eMonitoring with Librato\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eHugs and Queries\u003c/h3\u003e\n\n\u003cp\u003eI love this type of solution because it gets us looking at hard numbers and can easily as well as objectively say it is the DBs fault, the Apps fault, heroku’s fault, or no ones fault and everything is fine. Librato and Postgres don’t keep track of our egos, our mood or our fatigue – they keep us honest and on topics that really matter… something we all could use a little more of.\u003c/p\u003e","categories":[]},{"title":"Sequel and Postgres Range Types","link":"http://datachomp.com/archives/sequel-and-postgres-range-types/","author":"","publishedDate":"Fri, 15 Nov 2013 19:20:00 -0800","contentSnippet":"Like many rubyists, I have a hard time keeping up with which burrito truck is parked outside my house on any given day. In ...","content":"\u003cp\u003eLike many rubyists, I have a hard time keeping up with which burrito truck is parked outside my house on any given day. In postgres, I’ve solved this by entering the trucks and the duration they will be staying parked outside in my database:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE burritotrucks\n(\n  id serial primary key,\n  truckname text not null,\n  onsite daterange not null --or tsrange if busy schedule\n);\n\ninsert into burritotrucks (truckname, onsite)\nvalues ('thumpy tortillas', '[2013-11-15, 2013-11-17]'),\n('chompy delight', '[2013-11-15, 2013-11-17]'),\n('no dogs allowed', '[2013-11-16, 2013-11-21]'),\n('government cheese wagon', '[2013-11-11, 2013-11-14]'),\n('tortuga mochilla', '[2013-11-13, 2013-11-18]');\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere are a variety of operators to query \u003ca href\u003d\"http://www.postgresql.org/docs/current/static/rangetypes.html\"\u003erange types\u003c/a\u003e, but for this example, I’ll just be using the \u003ca href\u003d\"http://www.postgresql.org/docs/current/static/functions-range.html\"\u003econtains operator\u003c/a\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from burritotrucks where onsite @\u0026gt; now()\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eUh oh, it’s not working. Unlike the other range types, date ranges require a little more finesse. Postgres doesn’t quite trust the implicit conversion so we’ll just do a little hand holding:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from burritotrucks where onsite @\u0026gt; now()::date\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt works! But how do we do this in our application with \u003ca href\u003d\"https://github.com/jeremyevans/sequel\"\u003eSequel\u003c/a\u003e? First, we let \u003ca href\u003d\"https://github.com/jeremyevans/sequel\"\u003eSequel\u003c/a\u003e know we’re going to be using the range extensions:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSequel.extension(:pg_range)\nDB \u003d Sequel.connect(:adapter\u003d\u0026gt;\u0026#39;postgres\u0026#39;, :host\u003d\u0026gt; \u0026#39;localhost\u0026#39;\n, :database\u003d\u0026gt;\u0026#39;frontyard\u0026#39;, :user\u003d\u0026gt;\u0026#39;dc\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe query the database:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eoptions \u003d DB[:burritotrucks].all\np options\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand we get the data. We can see how beautifuly \u003ca href\u003d\"https://github.com/jeremyevans/sequel\"\u003eSequel\u003c/a\u003e handles the range type for us in the printed output and at this point we can get away with using our raw sql to get the data we need:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eoptions \u003d DB.fetch(\u0026quot;select * from burritotrucks where onsite @\u0026gt; now()::date\u0026quot;).all\np options\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis works, but I can imagine many AppDevs becoming ill at the sight of SQL in their app. In order to appease both sides of the aisle, \u003ca href\u003d\"https://github.com/jeremyevans/sequel\"\u003eSequel\u003c/a\u003e also has some pretty ruby friendly operators we can use by just adding the core_extensions as well as the range operators extension:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSequel.extension(:core_extensions, :pg_range, :pg_range_ops)\nDB \u003d Sequel.connect(:adapter\u003d\u0026gt;\u0026#39;postgres\u0026#39;, :host\u003d\u0026gt; \u0026#39;localhost\u0026#39;\n, :database\u003d\u0026gt;\u0026#39;frontyard\u0026#39;, :user\u003d\u0026gt;\u0026#39;dc\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we can get much more ruby friendly queries. Note, We still need to cast for our date value but that is pretty trivial:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eoptions \u003d DB[:burritotrucks].where(:onsite.pg_range.contains(Sequel.cast(Date.today, Date))).all\np options\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePeople often ask me why I like \u003ca href\u003d\"https://github.com/jeremyevans/sequel\"\u003eSequel\u003c/a\u003e so much and this is another great example why. It doesn’t punish me for knowing SQL. It doesn’t punish postgres for having so many amazing features and data types. It easily lets me know how many burrito trucks I have in my yard which is something you can not put a value on.\u003c/p\u003e","categories":[]},{"title":"Writable CTEs in Postgres","link":"http://datachomp.com/archives/writable-ctes-in-postgres/","author":"","publishedDate":"Fri, 15 Nov 2013 16:10:00 -0800","contentSnippet":"Postgres is filled to the brim with awesome features, but they don’t make sense for every occasion. I posted last night about ...","content":"\u003cp\u003ePostgres is filled to the brim with awesome features, but they don’t make sense for every occasion. I posted last night about my \u003ca href\u003d\"http://datachomp.com/archives/my-friend-rob/\"\u003eThankyou app\u003c/a\u003e and it happens to have a use case for writable \u003ca href\u003d\"http://www.postgresql.org/docs/current/static/queries-with.html\"\u003eCTEs (Common Table Expression)\u003c/a\u003e.\u003cbr\u003e\nFirst, lets new up some data:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edrop table if exists thanks;\ncreate table thanks (\n    id serial primary key,\n    who text not null,\n    picked boolean not null default 'false',\n    created_at date default now(),\n    last_picked date default '-infinity'\n);\n\ninsert into thanks (who)\nvalues ('rob conery'), ('postgres'), ('sidekiq'), ('demis bellot'), ('sinatra')\n, ('josh berkus'), ('elizabeth naramore'), ('amir rajan'), ('sequel');\n\nselect * from thanks;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBoom! This app selects a random person or project I’m thankful for that hasn’t already been picked or hasn’t been picked in the last 9 months. Here it is in code form:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from thanks where picked \u003d false or last_picked \u0026lt; now() - interval \u0026#39;9 months\u0026#39;;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow we can put it in a normal CTE:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewith guesswho as (\n    select * from thanks \n    where picked \u003d false or last_picked \u0026lt; now() - interval \u0026#39;9 months\u0026#39;)\nselect guesswho.id, guesswho.who\nfrom guesswho;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYes!!! Let’s pick a random row. For our randomizer, I would like a lovely set of sequential id’s I can pick from. Since we can’t completely trust the primary key id’s returned in our CTE (especially as rows start to get trimmed off), we’re going to throw a row_number function on, as well as pass our first CTE into a second CTE to generate a random number based on the result set:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewith guesswho as (\n    select ROW_NUMBER() OVER (ORDER BY id) as champs, * \n    from thanks where picked \u003d false or last_picked \u0026lt; now() - interval \u0026#39;9 months\u0026#39;)\n, onlyone as (select trunc(random() * count(0) + 1) as tops from guesswho)\nselect guesswho.id, guesswho.who\nfrom guesswho, onlyone\nwhere champs \u003d onlyone.tops;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYay!!! We’re getting data we love on projects we love. But where does the writable CTE come into play? How cool would it be if we could also mark the record we’re selecting as picked, so we don’t have to make an additional call to the DB to flag afterwards? Check it out:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewith guesswho as (select row_number() over (order by id) as champs, * \n    from thanks where picked \u003d false or last_picked \u0026lt; now() - interval \u0026#39;9 months\u0026#39;)\n, onlyone as (select trunc(random() * count(0) + 1) as tops from guesswho)\n\n, adios as (update thanks set picked \u003d \u0026#39;true\u0026#39;, last_picked \u003d now() from guesswho, onlyone where thanks.id \u003d guesswho.id and \nguesswho.champs \u003d onlyone.tops RETURNING thanks.picked)\n\nselect guesswho.id, guesswho.who\nfrom guesswho, onlyone, adios\nwhere champs \u003d onlyone.tops;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSo.Much.Awesome! Check out that 3rd CTE we added (adios), is using our previous CTE’s, updating the row we chose, as well as providing a returning statement of what it updated. The returning statement provides context for what happened inside that writable CTE to alleviate confusion between table expresisons. Feel free to play with it on your own machine and especially change the data for the people or tech you’re thankful for.\u003c/p\u003e","categories":[]},{"title":"My Friend Rob","link":"http://datachomp.com/archives/my-friend-rob/","author":"","publishedDate":"Thu, 14 Nov 2013 20:05:00 -0800","contentSnippet":"It’s been a little over 6 months since I left .Net and one of the personal concerns I had with Postgres/Ruby was how long it ...","content":"\u003cp\u003eIt’s been a little over 6 months since I left .Net and one of the personal concerns I had with Postgres/Ruby was how long it would be before I started getting complacent and taking everything for granted.\u003c/p\u003e\n\n\u003ch3\u003eAlways Be Coding\u003c/h3\u003e\n\n\u003cp\u003eTo counteract this concern, I made a little database full of projects and people I’m thankful for. You’ll see projects like sidekiq, hstore, pg_stat_statements, sinatra and you’ll also see people like Josh Berkus, Ryan Bates, Demis Bellot… It’s become a pretty big table because I’m thankful to so many. I also made a little console app to pick a random row and email it to me once a week because what good is data if you don’t use it?\u003c/p\u003e\n\n\u003ch3\u003eIt Passes in a Flash\u003c/h3\u003e\n\n\u003cp\u003eThe past few months have been amazing. The team I work with at Raisemore is top notch and it is an incredible feeling to be working with and helping non-profits every day. Tekpub got acquired by Pluralsight. That experience has been a lot of work and an absolute blast building videos with them. I’ve also helped reboot our local Ruby user group with 2 other friends and spoke to that group today on two topics I absolutely love – Sequel and Postgres.\u003c/p\u003e\n\n\u003ch3\u003eFor Whom The Phone Tolls\u003c/h3\u003e\n\n\u003cp\u003eWe just got back from dinner and I’m checking my usual blog posts and nightly reading when I get the familiar email every Friday at 00:00:00 UTC:\u003cbr\u003e\nSubject: Be Thankful\u003cbr\u003e\nBody: 1 – Rob Conery\u003c/p\u003e\n\n\u003cp\u003eI don’t know if it gets anymore serendipitous than that. Rob is the first entry I put in the table. Since I’ve met Rob, he has challenged me to be a better DBA, challenged my comfort zones and to be an overall better person. Some of the above he’s done directly, some of it indirectly and I’m thankful for all if it.\u003c/p\u003e\n\n\u003ch3\u003eperspective.empty?\u003c/h3\u003e\n\n\u003cp\u003eI can’t wait to see who/what shows up in my inbox next week. I can’t wait to reflect on what is was that connected with me. When I get the next mail, I don’t know yet if I’ll take the time to personally thank them or the project. What I do know is that between now and when I get my next mail, I hope that I can have the same effect on others my list has had on me.\u003c/p\u003e","categories":[]},{"title":"Helping Asset Pipeline Open Up A Little","link":"http://datachomp.com/archives/helping-asset-pipeline-open-up-a-little/","author":"","publishedDate":"Sat, 26 Oct 2013 12:42:00 -0700","contentSnippet":"A working Asset Pipeline can be a thing of beauty. A broken asset pipeline can be a horribly mean shut-in. One of my favorite ...","content":"\u003cp\u003eA working Asset Pipeline can be a thing of beauty. A broken asset pipeline can be a horribly mean shut-in. One of my favorite ways for it to break in my Rails 3 app is the:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eundefined method `directory?' for nil:NilClass\nrake aborted\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThanks AP, for breaking and basically telling me nothing. Luckily, it doesn’t have to be this way. If we take a moment to stop and get to know AP, we can get it to open up and be more helpful to us. We start by setting our bundler editor in .bashrc by adding the following line:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eexport BUNDLER_EDITOR\u003dsubl   #I set mine to sublimetext\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNext up, we hop into terminal and go for an in home visit right into the code itself:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebundle open sprockets  #sprockets is AP's birth name\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNavigate to lib-\u0026gt;sprockets-\u0026gt;base.rb\u003c/p\u003e\n\n\u003cp\u003efind your way to the “def each_entry(root, \u0026amp;block)” section of code and you’ll likely see a lack of error handling there. To fix it, I wrap a rescue around the “directory?” check like so:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebegin\n    if stat(path).directory?\n      each_entry(path) do |subpath|\n        paths \u0026lt;\u0026lt; subpath\n      end\n    end\n    rescue\n      puts \u0026quot;Hey friend, I have an issue at: #{path}\u0026quot;\n    end\nend\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis doesn’t fix all of AP’s problems, none of us are perfect, but it does coax the gem into letting us know where the problem is. Once we know where the problem is, we can work on it together rather than just throwing our arms up in the air and quitting.\u003c/p\u003e","categories":[]},{"title":"Radius Queries in Postgres","link":"http://datachomp.com/archives/radius-queries-in-postgres/","author":"","publishedDate":"Mon, 07 Oct 2013 11:56:00 -0700","contentSnippet":"Today, I found myself in a horrible situation. I was heading down i-235 and I became stricken with an insatiable burrito urge. ...","content":"\u003cp\u003eToday, I found myself in a horrible situation. I was heading down i-235 and I became stricken with an insatiable burrito urge. All the apps on my phone were borked and all I had was my trusty Postgres database. I needed to find a burritos shop and I needed to find one fast.\u003c/p\u003e\n\n\u003ch4\u003eWhere oh where to begin\u003c/h4\u003e\n\n\u003cp\u003eLuckily, I happen to know the latitude and longitude of all my favorite burrito places in Oklahoma City. I quickly add them to my database:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e--Hello Table!\nCREATE TABLE burritoplaces\n(id serial PRIMARY KEY,\nestablishment varchar(50) not null,\nlat double precision,\nlon double precision);  \n--Hello Data!\nINSERT INTO burritoplaces(establishment, lat,lon)\nVALUES ('Verde Bueno Burrito', 35.484388,-97.505035)\n,('Locos Lobos', 35.496025,-97.510185)\n,('Captain Crustacean', 35.51468,-97.524347)\n,('Double Stuffers Cafe', 35.523762,-97.508039)\n,('Cafe Truncate of Watonga', 35.866413,-98.473206);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe data checks out:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e-- all 5 entries\nSELECT * FROM burritoplaces;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePerfect! All my favorite places are there but sadly, I can’t do geospatial math in my head. I can’t even really do it outside of my head so I’m going to have to get some help. Enter the \u003ca href\u003d\"http://www.postgresql.org/docs/current/static/earthdistance.html\"\u003eearthdistance\u003c/a\u003e postgres extension and its helpful sibling ‘cube’:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e--turn on the magic\nCREATE EXTENSION cube;\nCREATE EXTENSION earthdistance;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eI’m becoming so weak… I need to wrap this up. Since I live in one of the four countries in the world that uses the Imperial system of measurement, I need to figure out how to do this whole thing in miles. Skimming over the earthdistance documentation, it looks like I just need to use the point commands. I whip up a query that is as tech tasty as some carne asada:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e-- my location on i-235 is a very hungry (35.512363,-97.515678)\nSELECT *, point(-97.515678, 35.512363) \u0026lt;@\u0026gt; point(lon, lat)::point AS burrito_distance\nFROM burritoplaces\nWHERE (point(-97.515678, 35.512363) \u0026lt;@\u0026gt; point(lon, lat)) \u0026lt; 10 --feel free to play this!\nORDER by burrito_distance;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis returns me everything that is less than 10 miles away and orders them by distance. I see that Captain Crustacian is a half mile away and they have amazing guacamole. Thank you Postgres, cube, and earthdistance. You have saved my life once again.\u003c/p\u003e\n\n\u003cp\u003eIf I lived anywhere else in the world, I would likely use meters and write the query as such:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eSELECT *, earth_distance(ll_to_earth(35.512363,-97.515678), ll_to_earth(lat, lon)) as burrito_distance\nFROM burritoplaces\nWHERE earth_box(ll_to_earth(35.512363,-97.515678), 4000) @\u0026gt; ll_to_earth(lat, lon)\nORDER by burrito_distance;\n\u003c/code\u003e\u003c/pre\u003e","categories":[]},{"title":"application_name in sequel","link":"http://datachomp.com/archives/application-name-in-sequel/","author":"","publishedDate":"Wed, 02 Oct 2013 07:22:00 -0700","contentSnippet":"When I was in the .net world, I was pretty adamant about the importance of giving your App a nice application_name to help out ...","content":"\u003cp\u003eWhen I was in the .net world, I was pretty adamant about the importance of giving your App a nice \u003ca href\u003d\"http://datachomp.com/archives/application-connection-ocd/\"\u003eapplication_name\u003c/a\u003e to help out your DBA. Now that I’m in the ruby/postgres world, the same still holds true.\u003c/p\u003e\n\n\u003cp\u003eAs much as I want to like ActiveRecord, I can’t seem to get past anything more than a casual friendship with it. My tool of choice is \u003ca href\u003d\"https://github.com/jeremyevans/sequel\"\u003eSequel\u003c/a\u003e. One of the problems with Sequel is that setting the application name isn’t very intuitive. Luckily, the awesome maintainer \u003ca href\u003d\"https://twitter.com/jeremyevans0\"\u003eJeremy Evans\u003c/a\u003e, pointed me in the right direction with the :after_connect option. Check it out:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003erequire \u0026#39;sequel\u0026#39;\nDB \u003d Sequel.connect(:adapter\u003d\u0026gt;\u0026#39;postgres\u0026#39;, :host\u003d\u0026gt; \u0026#39;localhost\u0026#39;\n, :database\u003d\u0026gt;\u0026#39;datachomp\u0026#39;, :user\u003d\u0026gt;\u0026#39;rob\u0026#39;, :max_connections \u003d\u0026gt; 10\n, :after_connect\u003d\u0026gt;(proc do |conn| conn.execute(\u0026quot;SET application_name TO \u0026#39;dbahugs\u0026#39;\u0026quot;) end))\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e When I look at my pg_stat_activity, I’m able to filter down properly and predictably:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eselect * from pg_stat_activity where application_name \u003d 'dbahugs'\n\u003c/code\u003e\u003c/pre\u003e","categories":[]}]}}, "responseDetails": null, "responseStatus": 200};

var geekIndulgenceMock = {"responseData": {"feed":{"feedUrl":"http://geekindulgence.com/feed/","title":"Geek Induldence","link":"http://geekindulgence.com","author":"","description":"Code. Technology. Life.","type":"rss20","entries":[{"title":"Blogging Goals for 2014","link":"http://geekindulgence.com/uncategorized/blogging-goals-for-2014/","author":"jfrench","publishedDate":"Tue, 07 Jan 2014 08:01:37 -0800","contentSnippet":"The new year has begun and with it comes the opportunity for me to set more blogging goals that will probably fall short of ...","content":"\u003cp\u003eThe new year has begun and with it comes the opportunity for me to set more blogging goals that will probably fall short of achieving.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite \u003cstrong\u003eat least\u003c/strong\u003e one post per month\u003c/li\u003e\n\u003cli\u003eMove my blog off WordPress. Probably to Ghost or Octopress\u003c/li\u003e\n\u003cli\u003eWrite an in depth multi-part series about something. Most likely something about Octopus Deploy or building mobile apps with PhoneGap and Angular. Maybe an in depth look at Angular directives.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI think that’s a lofty enough set of goals to keep me busy for the year. \u003cimg src\u003d\"http://geekindulgence.com/wp-includes/images/smilies/icon_wink.gif\" alt\u003d\";)\"\u003e \u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/uncategorized/blogging-goals-for-2014/\"\u003eBlogging Goals for 2014\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Uncategorized"]},{"title":"PhoneGap development with Grunt Ripple and a browser","link":"http://geekindulgence.com/mobile-dev/phonegap-development-with-grunt-ripple-and-a-browser/","author":"jfrench","publishedDate":"Wed, 20 Nov 2013 16:24:50 -0800","contentSnippet":"I love using PhoneGap to build cross-platform mobile apps. It let\u0026#8217;s me leverage my web skills to build an app that runs ...","content":"\u003cp\u003eI love using PhoneGap to build cross-platform mobile apps. It let’s me leverage my web skills to build an app that runs all major mobile platforms. You know what I don’t like? Emulators. They suck. They are a pain in the ass to setup. They use too much memory. Getting your app compiled and installed on to an emulator is tedious. And once you get your fancy hybrid mobile app on there, how do you debug your Javascript? I’m using my web skills to build this app and I want to use my web TOOLS as well! That’s where the \u003ca href\u003d\"http://ripple.incubator.apache.org/\"\u003eRipple Emulator\u003c/a\u003e comes in. I know, I know. I just said I hate emulators and now here’s another one. But this one’s different.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href\u003d\"http://ripple.incubator.apache.org/\"\u003eRipple\u003c/a\u003e runs your browser and emulates the parts of the device that PhoneGap and Cordova interact with. It displays your mobile app in an appropriately sized iframe (with some nice chrome around it to make it look like it’s on a phone/tablet). It lets you send mock GPS coordinates, simulate Accelerometer events, all that jazz. It also sets CSS properties on the iframe so that your responsive CSS gets invoked based on appropriate \u003ccode\u003edevice-width\u003c/code\u003e, \u003ccode\u003edevice-height\u003c/code\u003e and \u003ccode\u003epixel-density-ratio\u003c/code\u003e properties. Nice!\u003c/p\u003e\n\n\u003cp\u003eOK, cool, I’m sold! So, how do you use it? \u003ca href\u003d\"http://ripple.incubator.apache.org/\"\u003eRipple\u003c/a\u003e is a CLI tool that you install via NPM. Once installed you can run a command like \u003ccode\u003eripple emulate\u003c/code\u003e and it will fire up a web server for the content in you \u003ccode\u003ewww\u003c/code\u003e directory and inject it’s awesomeness right into the web server when you hit it with your browser. That’s all fine and good but I prefer to use \u003ca href\u003d\"http://gruntjs.com\"\u003eGrunt\u003c/a\u003e to do a lot of preprocessing on my files (minification, concatination, copy files all over the place, etc). All of my \u003ca href\u003d\"http://gruntjs.com\"\u003eGrunt\u003c/a\u003e tasks need to be run before I can call let Ripple do it’s thing. I also like to use a Grunt \u003ccode\u003ewatch\u003c/code\u003e task to re-run my Gruntfile when I make changes to HTML, CSS or JS. So it would be ideal if I could just have a \u003ca href\u003d\"http://gruntjs.com\"\u003eGrunt\u003c/a\u003e task that would fire up the Ripple emulator. But that didn’t exist…so I made one! \u003cimg src\u003d\"http://geekindulgence.com/wp-includes/images/smilies/icon_smile.gif\" alt\u003d\":)\"\u003e  It turns out that \u003ca href\u003d\"http://gruntjs.com/creating-plugins\"\u003emaking a Grunt plugin\u003c/a\u003e isn’t that hard.\u003c/p\u003e\n\n\u003ch3\u003egrunt-ripple-emulator\u003c/h3\u003e\n\n\u003cp\u003eI’m going to assume that you already have Grunt installed and working in your project. If not, go check out \u003ca href\u003d\"http://gruntjs.com/getting-started\"\u003egruntjs.com/getting-started\u003c/a\u003e I’ll wait…\u003c/p\u003e\n\n\u003cp\u003eOK, so let’s start by getting the \u003ca href\u003d\"https://npmjs.org/package/grunt-ripple-emulator\"\u003egrunt-ripple-emulator\u003c/a\u003e plugin:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ npm install grunt-ripple-emulator --save-dev\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow add a \u003ccode\u003eripple\u003c/code\u003e section to your Gruntfile:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egrunt.initConfig({\n  ripple: {\n    options: {\n      path: 'www',\n      keepAlive: true\n    }\n  },\n})\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd add \u003ccode\u003eripple\u003c/code\u003e to one of your Grunt tasks:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egrunt.registerTask('server', 'minify','and-all-that','cool-stuff', 'ripple');\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAll done! Just run:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ grunt server\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eand you’re off and running! The task should fire up your default browser and you should now see your app in the ripple emulator. Now you can click through your app, hit up all your favorite F12 tools and get that app ready to ship! Make sure you read the docs in the README file for [grunt-ripple-emulator] so you understand how to make it interact with all your other Grunt tasks.\u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/mobile-dev/phonegap-development-with-grunt-ripple-and-a-browser/\"\u003ePhoneGap development with Grunt Ripple and a browser\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Mobile Development","cordova","grunt","phonegap","ripple"]},{"title":"Continuous Delivery is the Most Important Part of Agile","link":"http://geekindulgence.com/devops/continuous-delivery-is-the-most-import-part-of-agile/","author":"jfrench","publishedDate":"Wed, 26 Jun 2013 12:58:02 -0700","contentSnippet":"These days it seems like a foregone conclusion that every shop probably should be using Agile. Yeah, you read that right: I ...","content":"\u003cp\u003eThese days it seems like a foregone conclusion that every shop probably \u003cem\u003eshould\u003c/em\u003e be using Agile. Yeah, you read that right: I said Agile with a capital A (as if that’s really a thing). You may be using any one of the bajillion agile methodologies out there or a Frankenstein built out of handful of them, but no matter how Xtremely Scrumified your Kanban process is, if you aren’t practicing continuous delivery then you are falling short of \u003cem\u003ereally\u003c/em\u003e practicing Agile. Worse still, you’re cheating your end users out of the bliss they’ll feel when using that super-awesome-game-changing feature you just finished building!\u003c/p\u003e\n\n\u003cp\u003eContinuous delivery is the most important part of any agile process because it’s the part where you actaully deliver the code you’ve been working on. It’s what closes that short feedback loop that we all love about Agile. Your stakeholders have told you exactly what they think they want and you’ve built it. So why wait to ship it? The sooner you ship it the sooner they can start gleaning business value from it. Or tell you that it sucks. Either way, there is tremendous value in delivering your code to production often.\u003c/p\u003e\n\n\u003cp\u003eThe authors of the Agile Manifesto realized this and made continuous delivery a key tenet in the document that has helped to shape Agile movement and all of the flavors of Agile that are out in the wild today:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eOur highest priority is to satisfy the customer through early and continuous delivery of valuable software.\u003c/p\u003e\n  \n  \u003cp\u003e–\u003ccite\u003ehttp://agilemanifesto.org/principles.html\u003c/cite\u003e\u003c/p\u003e\n  \n  \u003cp\u003eDeliver working software frequently, from a  couple of weeks to a couple of months, with a  preference to the shorter timescale.\u003c/p\u003e\n  \n  \u003cp\u003e–\u003ccite\u003ehttp://agilemanifesto.org/principles.html\u003c/cite\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf you are not practicing continuous delivery you are doing it wrong! Now that you’ve identified the problem, refactor your process and start delivering early and often. You’ll be glad you did.\u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/devops/continuous-delivery-is-the-most-import-part-of-agile/\"\u003eContinuous Delivery is the Most Important Part of Agile\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["DevOps","agile","continuous delivery","devops"]},{"title":"Install Redis as a Windows Service using Chocolatey","link":"http://geekindulgence.com/web-development/install-redis-as-a-windows-service-using-chocolatey/","author":"jfrench","publishedDate":"Wed, 02 Jan 2013 10:02:14 -0800","contentSnippet":"So you\u0026#8217;re developing your hot new application and you say to yourself  \u0026#8220;Self, we should Redis because ...","content":"\u003cp\u003eSo you’re developing your hot new application and you say to yourself  “Self, we should Redis because \u0026lt;insert-one-of-many-reasons-redis-is-awesome\u0026gt;”. But, like me, you’re primarily a Windows person and every time you see instructions look like  \u003ccode\u003e$make blah-blah-blah\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eyou say “Ewww, I just threw up a little bit in mouth”.\u003c/p\u003e\n\u003cp\u003eNot to worry! I got you covered. Using the fantastic \u003ca href\u003d\"http://chocolatey.org\"\u003eChocolatey package manager for Windows\u003c/a\u003e you can just do:\u003c/p\u003e\n\u003cdiv\u003e\n\u003cp\u003e\u003ccode\u003eC:\\\u0026gt; cinst redis\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003e…and BAM you’ve got a local redis instance running as a Windows Service. You can hit it from any redis client at http://localhost:6379.\u003c/p\u003e\n\u003cp\u003eI can only take credit for packaging this up for Chocolatey. All of the really hard work is done by:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://invece.org/\"\u003eSalvatore Sanfilippo\u003c/a\u003e (\u003ca href\u003d\"http://twitter.com/antirez\"\u003e@antirez\u003c/a\u003e) who wrote Redis: \u003ca href\u003d\"https://github.com/antirez/redis\"\u003ehttps://github.com/antirez/redis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://blog.lovor.net/\"\u003eDusan Majkic\u003c/a\u003e (\u003ca href\u003d\"http://twitter.com/dmajkic\"\u003e@dmajkic\u003c/a\u003e) who ported Redis to Windows: \u003ca href\u003d\"https://github.com/dmajkic/redis\"\u003ehttps://github.com/dmajkic/redis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://ruilopes.com/\"\u003eRui Lopes\u003c/a\u003e (\u003ca href\u003d\"http://twitter.com/ruiglopes\"\u003e@ruiglopes\u003c/a\u003e) who added the Windows installer: \u003ca href\u003d\"https://github.com/rgl/redis\"\u003ehttps://github.com/rgl/redis\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you’re not familiar with \u003ca href\u003d\"http://redis.io\"\u003eRedis\u003c/a\u003e you should probably \u003ca title\u003d\"Google search for Redis is Awesome\" href\u003d\"https://www.google.com/search?q\u003dredis%20is%20awesome\"\u003eGoogle it\u003c/a\u003e and make sure you are using it because it actually solves your problem and not just because someone on the internet told you it was awesome. \u003cimg src\u003d\"http://geekindulgence.com/wp-includes/images/smilies/icon_wink.gif\" alt\u003d\";)\"\u003e \u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/web-development/install-redis-as-a-windows-service-using-chocolatey/\"\u003eInstall Redis as a Windows Service using Chocolatey\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["DevOps","Web Development","chocolatey","nosql","redis"]},{"title":"Using OctoPack with NuGet Package Restore","link":"http://geekindulgence.com/tips-and-tricks/using-octopack-with-nuget-package-restore/","author":"jfrench","publishedDate":"Fri, 23 Mar 2012 11:16:53 -0700","contentSnippet":"I recently started using Octopus Deploy to manage deployment across environments. They provide a NuGet package called OctoPack ...","content":"\u003cp\u003eI recently started using \u003ca href\u003d\"http://octopusdeploy.com\" title\u003d\"Octopus Deploy\"\u003eOctopus Deploy\u003c/a\u003e to manage deployment across environments. They provide a NuGet package called \u003ca href\u003d\"http://nuget.org/packages/OctoPack\" title\u003d\"OctoPack\"\u003eOctoPack\u003c/a\u003e that makes it easy to create the required packages to deploy your app. OctoPack is basically just a set of MSBuild targets that get added as an import directive in your project file. This is all fine and good unless you are using the \u003ca href\u003d\"http://docs.nuget.org/docs/workflows/using-nuget-without-committing-packages\" title\u003d\"Using NuGet without committing packages to source control\"\u003eNuGet Package Restore\u003c/a\u003e workflow where you don’t commit your NuGet packages to source control. What you end up with is a chicken-and-egg scenario: Your project is set to use an MSBuild pre-build task to restore packages, but your project imports MSBuild tasks from one of those packages so you get a compilation error before it can restore the packages. To solve this problem you need to copy the MSBuild targets file for OctoPack to your project and commit it to source control.\u003c/p\u003e\n\n\u003cp\u003eLuckily, the \u003ca href\u003d\"https://github.com/OctopusDeploy/OctoPack\" title\u003d\"OctoPack on Github\"\u003eOctoPack project is available on GitHub\u003c/a\u003e so I forked it and updated it’s install script to handle all this for you. \u003cdel\u003eI have submitted a pull request to the author but if you just can’t wait I have also published an update to the package on the Geek Indulgence MyGet feed: http://www.myget.org/F/geekindulgence/. Just add this to your VS2010 Package Manager (via Tools \u0026gt; Options \u0026gt; Package Manager \u0026gt; Package Sources) and you can install the updated version of the package.\u003c/del\u003e \u003cstrong\u003eUPDATE:\u003c/strong\u003e Paul Stovell of Octopus Deploy has merged my pull request and pushed a \u003ca href\u003d\"http://nuget.org/packages/OctoPack\" title\u003d\"OctoPack on NuGet\"\u003enew version of OctoPack\u003c/a\u003e to the official NuGet feed.\u003c/p\u003e\n\n\u003cp\u003eOctopus Deploy is an awesome tool and I’ll be putting together a detailed post about using it very soon. Stay tuned!\u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/tips-and-tricks/using-octopack-with-nuget-package-restore/\"\u003eUsing OctoPack with NuGet Package Restore\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["DevOps","Tips and Tricks","nuget","octopus"]},{"title":"Mac OS X Post Install Goodies","link":"http://geekindulgence.com/tips-and-tricks/mac-os-x-post-install-goodies/","author":"jfrench","publishedDate":"Mon, 27 Feb 2012 09:21:24 -0800","contentSnippet":"Jason Seifer has a nice post on getting OS X setup in a developer friendly manner after you finish the install. He goes through ...","content":"\u003cp\u003e\u003ca href\u003d\"http://jasonseifer.com/\" title\u003d\"Jason Seifer\"\u003eJason Seifer\u003c/a\u003e has a nice post on getting OS X setup in a developer friendly manner after you finish the install. He goes through setting up rvm, git and some nice tweaks to the bash prmpt. This is mostly just a personal bookmark so I can find this again later. \u003cimg src\u003d\"http://geekindulgence.com/wp-includes/images/smilies/icon_smile.gif\" alt\u003d\":)\"\u003e \u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/tips-and-tricks/mac-os-x-post-install-goodies/\"\u003eMac OS X Post Install Goodies\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Tips and Tricks","git","Mac","ruby"]},{"title":"Glimpse + AppHarbor \u003d Sad Face :(","link":"http://geekindulgence.com/web-development/glimpse-appharbor-sad-face/","author":"jfrench","publishedDate":"Tue, 05 Jul 2011 06:29:52 -0700","contentSnippet":"So\u0026#8230;you\u0026#8217;re using MVC3 right? Good. And you\u0026#8217;re using the awesome new server debugging/troubleshooting tool ...","content":"\u003cp\u003eSo…you’re using MVC3 right? Good. And you’re using the awesome new server debugging/troubleshooting tool \u003ca href\u003d\"http://getglimpse.com/\"\u003eGlimpse\u003c/a\u003e right? Naturally! And you’re deploying to fantastic \u003ca href\u003d\"http://appharbor.com/\"\u003eAppHarbor \u003c/a\u003eplatform right? Of course you are! And they all go together like peanut butter and chocolate right? WRONG!\u003c/p\u003e\n\n\u003cp\u003eWhile all 3 of these things are quite awesome, you’ll be quite disappointed when you push your site to AppHarbor and then try to get a Glimpse into what’s happening on the server-side. This is because Glimpse, by default, only allows you to use it from localhost and if you want to use it from any other hosts you have to specify the IPs in the web.config. OK, that’s cool, I’ll just add my public IP and we’ll be in business right? Nope. That’s because the IP restrictions are enforced by this code:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eusing System.Web;\nusing Glimpse.Core.Configuration;\nusing Glimpse.Core.Extensibility;\n\nnamespace Glimpse.Core.Validator\n{\n    [GlimpseValidator]\n    internal class IpAddressValidator:IGlimpseValidator{\n        public bool IsValid(HttpContextBase context, GlimpseConfiguration configuration, LifecycleEvent lifecycleEvent)\n        {\n            if (configuration.IpAddresses.Count \u003d\u003d 0) return true; //no configured list, allow all IP's\n\n            return configuration.IpAddresses.Contains(context.Request.UserHostAddress);\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSo, what’s wrong with that? Nothing. The problem lies in the architecture of AppHarbor. They use load balancers to send requests to the server your app is running on. That means that Request.UserHostAddress is going to be the IP of the load balancer rather than the actual client.\u003c/p\u003e\n\n\u003cp\u003eAt this point you have two options:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd the IP of the load balancer\u003c/li\u003e\n\u003cli\u003eAllow all IPs\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBoth of these result in any client being allowed to turn on Glimpse on your site. That’s not good. It reveals too much info about your server. The code could be updated to also check the \u003ccode\u003eHTTP_X_FORWARDED_FOR\u003c/code\u003e header value but that would be pretty easy to fake in a non-loadbalanced environment.\u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/web-development/glimpse-appharbor-sad-face/\"\u003eGlimpse + AppHarbor \u003d Sad Face :(\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Web Development","AppHarbor","Glimpse","MVC3"]},{"title":"Customize an Existing Amazon Machine Image (AMI) from Windows","link":"http://geekindulgence.com/virtualization/customize-an-existing-amazon-machine-image-ami-from-windows/","author":"jfrench","publishedDate":"Tue, 14 Oct 2008 12:39:00 -0700","contentSnippet":"Creating a custom AMI from scratch can be a daunting task, not to mention time consuming. There are a lot of public AMI's that ...","content":"\u003cp\u003eCreating a custom AMI from scratch can be a daunting task, not to mention time consuming. There are a lot of public AMI’s that are a pretty good start to many tasks, so it might be easier and quicker to just customize one.\u003c/p\u003e\n\u003cp\u003eI’ll assume that you have already:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSigned up for \u003ca title\u003d\"Amazon EC2\" href\u003d\"http://aws.amazon.com/ec2/\"\u003eEC2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://docs.amazonwebservices.com/AWSEC2/2008-05-05/GettingStartedGuide/setting-up-your-tools.html\"\u003eInstalled and Setup\u003c/a\u003e the \u003ca title\u003d\"Amazon EC2 Command Line Tools\" href\u003d\"http://developer.amazonwebservices.com/connect/entry.jspa?externalID\u003d351\u0026amp;categoryID\u003d88\"\u003eEC2 Command Line Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://docs.amazonwebservices.com/AWSEC2/2008-05-05/GettingStartedGuide/running-an-instance.html\"\u003eLaunched an instance\u003c/a\u003e of the AMI you wish to customize.\u003c/li\u003e\n\u003cli\u003eCustomized the instance and it is still running.\u003c/li\u003e\n\u003cli\u003eCan SSH into the instance with PuTTY.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo you’ve got your image all polished up just the way you want it. Now what? Well, first you need to save your x509 EC2 certificate to the image. The most straight forward way to accomplish this is to open your certificate locally and copy all the text to your clip board. Now hop over to putty, type\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003evi /mnt/cert.pem\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eand hit enter. This will create a file called cert.pem in /mnt and open it for editing. \u003cem\u003e(NOTE: The image bundling utility will ignore certain sub folders when it creates the image. One of those is /mnt which makes it a good place to store things like private key files  and the new image itself that you wouldn’t want bundled with the image.) \u003c/em\u003ePress ESC followed by i to enter INSERT mode. Now you can paste the text of your certificate into PuTTY by simply right clicking in the PuTTY window.\u003c/p\u003e\n\u003cp\u003eDo the same for your private key file saving it to /mnt/privatekey.pem.\u003c/p\u003e\n\u003cp\u003eOK, now you’re ready to bundle the AMI and save the image. run the following command from the \u003cstrong\u003e\u003cem\u003econsole of the AMI you customized\u003c/em\u003e\u003c/strong\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003eec2-bundle-vol -d \u0026lt;path to save the image\u0026gt; -k \u0026lt;path to private key file\u0026gt; -c \u0026lt;path to certificate file\u0026gt; -u \u0026lt;user account number\u0026gt;\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"color:#008000\"\u003e\u003cspan style\u003d\"font-family:System\"\u003e\u0026lt;path to save the image\u0026gt;\u003c/span\u003e \u003c/span\u003e\u003cspan style\u003d\"color:#000000\"\u003e\u003d Where you want to save the AMI that you are bundling. I suggest something like /mnt/ami so that the image won’t be included in the bundled image. (That would be rather redundant!)\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"color:#008000\"\u003e\u003cspan style\u003d\"font-family:System\"\u003e\u0026lt;path to private key file\u0026gt;\u003c/span\u003e \u003c/span\u003e\u003cspan style\u003d\"color:#000000\"\u003e\u003d The path to your private key file on the image. In this example we used /mnt/privatekey.pem.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"color:#008000\"\u003e\u003cspan style\u003d\"font-family:System\"\u003e\u0026lt;path to certificate file\u0026gt;\u003c/span\u003e \u003c/span\u003e\u003cspan style\u003d\"color:#000000\"\u003e\u003d The path to your certificate file on the image. In this example we used /mnt/cert.pem.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"color:#008000\"\u003e\u003cspan style\u003d\"font-family:System\"\u003e\u0026lt;user account number\u0026gt;\u003c/span\u003e \u003c/span\u003e\u003cspan style\u003d\"color:#000000\"\u003e\u003d Your Amazon Web Services account number. You can find this by logging into the AWS site and clicking on Access Identifiers. Your account number is listed near the top right corner right under “Welcome, Your Name”.\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eAlright, now we need to upload the image S3 so that it will be usable. From the console of the image run the following command:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cspan style\u003d\"font-family:System;font-size:85%;color:#008000\"\u003eec2-upload-bundle -b \u0026lt;bucket name\u0026gt; -m \u0026lt;path to manifest file\u0026gt; -a \u0026lt;access key\u0026gt; -s \u0026lt;secret key\u0026gt;\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"font-size:85%;color:#333333\"\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003e\u0026lt;bucket name\u0026gt;\u003c/span\u003e \u003d The bucket in your S3 account that you want to save the image to.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"color:#333333\"\u003e\u003cspan style\u003d\"font-size:85%\"\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003e\u0026lt;path to manifest file\u0026gt;\u003c/span\u003e \u003d Path to manifest.xml created by the image bundling tool. In this example /mnt/ami/manifest.xml.\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"font-size:85%;color:#333333\"\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003e\u0026lt;access key\u0026gt;\u003c/span\u003e \u003d Your AWS access key from the Access Identifiers page of AWS.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"font-size:85%;color:#333333\"\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003e\u0026lt;secret key\u0026gt;\u003c/span\u003e \u003d Your AWS secret key from the Access Identifiers page of AWS.\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eWe’re almost done! Now you just need to register the image with EC2. From your desktop (not the image you customized.) run the following command:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003eec2-register \u0026lt;bucket name\u0026gt;/manifest.xml\u003c/span\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eCongratulations! You now have a customized AMI ready to be launched.\u003c/p\u003e\n\u003cp\u003e\u003cspan style\u003d\"font-family:System;color:#008000\"\u003e \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/virtualization/customize-an-existing-amazon-machine-image-ami-from-windows/\"\u003eCustomize an Existing Amazon Machine Image (AMI) from Windows\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Virtualization","AWS","EC2","S3"]},{"title":"Remove ‘Compress Old Files’ from Disk Cleanup Wizard","link":"http://geekindulgence.com/tips-and-tricks/remove-compress-old-files-from-disk-cleanup-wizard/","author":"jfrench","publishedDate":"Sun, 12 Oct 2008 13:58:00 -0700","contentSnippet":"Haven\u0026#8217;t had to use this trick in a while since I\u0026#8217;m running Vista on all my machines these days. I was over at my ...","content":"\u003cp\u003eHaven’t had to use this trick in a while since I’m running Vista on all my machines these days. I was over at my Mom’s house using her ancient XP box that was almost out disk space. I fired up the disk cleanup wizard and then I remembered why I don’t like it. It takes about 3 years to scan every file on the disk and suggest that I compress the old ones.  Follow the steps below and you can use the disk cleanup wizard without it trying to compress all your old term papers still on your hard drive!\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStart\u0026gt;Run type regedit and hit enter.\u003c/li\u003e\n\u003cli\u003eCruise on down to HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\u003c/li\u003e\n\u003cli\u003eDelete the ‘Compress Old Files’ key.\u003c/li\u003e\n\u003cli\u003eHave glass of your favorite beverage and use the Disk Cleanup Wizard to free up some extra space.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOf course, if your looking for something that will help you get a better handle on what file are taking up so much space and where they are you should check out \u003ca href\u003d\"http://www.windirstat.info/\"\u003eWinDirStat\u003c/a\u003e. It will scan your drives and draw a picture of every file on your hard drive so you can see where the big ones are and delete them.\u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/tips-and-tricks/remove-compress-old-files-from-disk-cleanup-wizard/\"\u003eRemove ‘Compress Old Files’ from Disk Cleanup Wizard\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Tips and Tricks","WinXP"]},{"title":"Installing Ubuntu 8.04 under Microsoft Virtual PC 2007","link":"http://geekindulgence.com/virtualization/installing-ubuntu-8-04-under-microsoft-virtual-pc-2007/","author":"jfrench","publishedDate":"Fri, 10 Oct 2008 10:28:00 -0700","contentSnippet":"Trying to install Ubuntu on VPC 2007 I kept getting the following error: An unrecoverable processor error has been encountered. ...","content":"\u003cp\u003eTrying to install Ubuntu on VPC 2007 I kept getting the following error:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e\u003cem\u003e\u003cstrong\u003e An unrecoverable processor error has been encountered.\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eThe virtual machine will reset now.\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href\u003d\"http://lh6.ggpht.com/jeffdfrench/SO-Q0xSP6yI/AAAAAAAAADs/7-gWChDNYAE/s1600-h/image%5B2%5D.png\"\u003e\u003cimg style\u003d\"border-bottom:0px;border-left:0px;border-top:0px;border-right:0px\" border\u003d\"0\" alt\u003d\"image\" src\u003d\"http://lh5.ggpht.com/jeffdfrench/SO-Q1cGYdkI/AAAAAAAAADw/kUAD8AiY-mA/image_thumb.png?imgmax\u003d800\" width\u003d\"244\" height\u003d\"98\"\u003e\u003c/a\u003e  \u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003eAfter much searching I landed at a blog post by Robert Cain over at \u003ca title\u003d\"Arcane Code\" href\u003d\"http://arcanecode.wordpress.com\"\u003eArcane Code\u003c/a\u003e. He has a nice step by step for installing Ubuntu 8.04 on VPC 2007, however like myself, many folks were still getting this error. Reading down the comments there were several suggested workarounds. \u003ca href\u003d\"http://arcanecode.wordpress.com/2008/04/24/installing-ubuntu-804-under-microsoft-virtual-pc-2007/#comment-25153\"\u003eThis one\u003c/a\u003e from SteveZ fixed the problem:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e- At the prompt, press F4 and select “Safe graphics mode”.     \u003cbr\u003e- Then press F6 and delete the part that says “quiet splash –” and replace it with “vga\u003d791 noreplace-paravirt”.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eYou can read Robert’s excellent step by step at:\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"http://arcanecode.wordpress.com/2008/04/24/installing-ubuntu-804-under-microsoft-virtual-pc-2007/\"\u003eInstalling Ubuntu 8.04 under Microsoft Virtual PC 2007 « Arcane Code\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003eAnd be sure to check all the way down the comments if you are still having issues. Lot’s of smart folks chiming in over there.\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003ePS: Don’t forget to edit grub to use those options after you install or you won’t be able to boot \u003cimg src\u003d\"http://geekindulgence.com/wp-includes/images/smilies/icon_wink.gif\" alt\u003d\";)\"\u003e \u003c/p\u003e\n\u003cp\u003eThe post \u003ca href\u003d\"http://geekindulgence.com/virtualization/installing-ubuntu-8-04-under-microsoft-virtual-pc-2007/\"\u003eInstalling Ubuntu 8.04 under Microsoft Virtual PC 2007\u003c/a\u003e appeared first on \u003ca href\u003d\"http://geekindulgence.com\"\u003eGeek Induldence\u003c/a\u003e.\u003c/p\u003e","categories":["Virtualization"]}]}}, "responseDetails": null, "responseStatus": 200};
