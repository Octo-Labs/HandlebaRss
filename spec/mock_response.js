var mockResponse = {"responseData": {"feed":{
  "feedUrl":"http://www.octolabs.com/blogs/octoblog/feed.xml",
  "title":"OctoBlog","link":"http://www.octolabs.com/blogs/octoblog",
  "author":"Blog Author","description":"The OctoLabs Blog.","type":"atom10",
  "entries":[{"title":"Techlahoma - Multiple Authentications (Part 2)","link":"http://www.octolabs.com/blogs/octoblog/2014/01/07/techlahoma_multiple_authentications_part_2/","author":"Article Author","publishedDate":"Mon, 06 Jan 2014 16:00:00 -0800","contentSnippet":"In the last episode we started to implement the feature to allow a user to connect multiple social profiles to their Techlahoma ...","content":"\u003cp\u003e\u003cspan\u003eIn the \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2014/1/7/techlahoma_multiple_authentications_p1\"\u003elast episode\u003c/a\u003e\u003cspan\u003e we started to implement the feature to allow a user to connect multiple social profiles to their Techlahoma account. Today weâ€™ll finish that feature.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eCurrently, when we run cucumber we're seeing this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber -r features features/users/multiple_auth.feature:9\n...\n    Then she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003e# features/step_definitions/users_steps.rb:24\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Welcome Test User! Sign Out Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:17:in \u003cspan\u003e`\u003c/span\u003eThen she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThis step in the scenario covers the fact that we want to encourage people to make their account connections public when they return to Techlahoma after the OAuth dance.  Essentially we just want to show the user their new authentication, and allow them to update it.  This is a sub-set of the standard REST actions, so lets use a dedicated \u003ccode\u003eAuthenticationsController\u003c/code\u003e to handle the job.\u003c/p\u003e\n\n\u003cpre\u003erails g controller authentications\n\u003c/pre\u003e\n\u003cp\u003eThen we should add routes for the \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions in \u003ccode\u003econfig/routes.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eresources\u003c/span\u003e \u003cspan\u003e:authentications\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:only\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:edit\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e:update\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen we can just stub the methods in the controller\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthenticationsController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eedit\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen we can add a template at \u003ccode\u003eapp/views/authentications/edit.html.erb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003eWould you like to make this public?\n\u003c/pre\u003e\n\u003cp\u003eNow we just need to redirect to this route when we have a newly created authentication.  So the new \u003ccode\u003ecreate\u003c/code\u003e method looks like this.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n    \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreated_at\u003c/span\u003e \u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003eTime\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eseconds\u003c/span\u003e\n      \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eedit_authentication_path\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\n      \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow cucumber lets us know that its time time actually build the part that will allow the user to make the connection public.\u003c/p\u003e\n\n\u003cpre\u003e...\n    When she makes the provider public                        \u003cspan\u003e# features/users/multiple_auth.feature:18\u003c/span\u003e\n      Undefined step: \u003cspan\u003e\"she makes the provider public\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eCucumber::Undefined\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:18:in \u003cspan\u003e`\u003c/span\u003eWhen she makes the provider public\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003ch2\u003eSecond Thoughts\u003c/h2\u003e\n\n\u003cp\u003eSince the time that I first wrote the feature scenario I've had a chance to discuss this scenario with Rob.  We agreed that the initial scenario called for functionality that we really don't need. We intentionally choose to use 3rd party authentication providers so that we can't be responsible for leaking passwords in a worst case scenario.  Following on the idea that we don't want to be keeping secrets on behalf of our users we decided that we don't need to allow users to show and hide a social profile connection.  Our policy will be that Techlahoma is a public community forum, and that everything that happens there is public.  If you don't want people to see your Twitter profile on your Techlahoma page, just don't connect your Twitter account.\u003c/p\u003e\n\n\u003cp\u003eThat means we get to trim down the scenario.  Here's the new scenario after removing all of the steps that have to do with making a connection public.\u003c/p\u003e\n\n\u003cpre\u003e \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add Twitter\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with GitHub\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her Twitter account\n    \u003cspan\u003eThen\u003c/span\u003e User.count should \u003d\u003d 1\n    \u003cspan\u003eThen\u003c/span\u003e Authentication.count should \u003d\u003d 2\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove Twitter\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch2\u003eCleaning up\u003c/h2\u003e\n\n\u003cp\u003eNow we need to clean up a thing or two from earlier in this post.  First we can clean up the redirect logic in the \u003ccode\u003eSessionsController#create\u003c/code\u003e method and just redirect to the profile path.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n    \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n    \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eprofile_path\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter redirecting the user back to their profile we'll want to show them a \"Remove Twitter\" link in place of the current \"Add your Twitter account\" link.  We'll have that link point to a \u003ccode\u003edestroy\u003c/code\u003e on the \u003ccode\u003eAuthenticationsController\u003c/code\u003e.  We can also remove the edit and update methods from that controller and their routes from \u003ccode\u003eroutes.rb\u003c/code\u003e.  So after making some changes the \u003ccode\u003eAuthenticationsController\u003c/code\u003e looks like this.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthenticationsController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edestroy\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd the authentications route looks like this.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eresources\u003c/span\u003e \u003cspan\u003e:authentications\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:only\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:destroy\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe profile template needs to determine if the current user has a Twitter authentication or not, so lets imagine that we have a method called \u003ccode\u003eauthentication_for\u003c/code\u003e and we'll use it in our template to do this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'twitter'\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/twitter\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e'Remove Twitter'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'twitter'\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003e:confirm\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'Are you sure?'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:method\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:delete\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe can add a simple \u003ccode\u003eauthentication_for\u003c/code\u003e method to the \u003ccode\u003eUser\u003c/code\u003e model.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eauthentication_for\u003c/span\u003e \u003cspan\u003eprovider\u003c/span\u003e\n    \u003cspan\u003eauthentications\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:providere\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003eprovider\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow our entire scenario passes!  Hooray!  But wait, we haven't actually implemented the action for removing an accountâ€¦.  Our scenario was incomplete, so we need to add a few lines to it.  We can just tack this onto the end of it.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003eWhen\u003c/span\u003e she removes her Twitter account\n  \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe already have a step definition for the second new line, and the definition for the first new one is easy to write.  \u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she removes her Twitter account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Remove Twitter\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we just need to implement the delete method.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edestroy\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentications\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eparams\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edestroy\u003c/span\u003e\n    \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eprofile_path\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eScenario complete!\u003c/p\u003e\n\n\u003ch2\u003eAdding GitHub\u003c/h2\u003e\n\n\u003cp\u003eNow we need to update the \"Add GitHub\" scenario to match the new requirements, and to be a complete scenario.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add GitHub\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with Twitter\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your GitHub account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her GitHub account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove GitHub\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she removes her GitHub account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your GitHub account\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eTo implement all of the steps in this scenario we'll update some existing steps to be more flexible.  We'll also extract some of the code in the application to be more general and to account for both Twitter and GitHub.\u003c/p\u003e\n\n\u003cp\u003eFor the first step we can alter the existing step definition for \"Given a user signed in with GitHub\".\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a user signed in with (.*?)$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/signin\"\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In With \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow the first failing step is \u003ccode\u003eThen she should see \"Add your GitHub account\"\u003c/code\u003e.  The existing profile template is a good pattern for what we want for a single service.  So let's move the contents of that file into a new partial file called \u003ccode\u003eapp/views/profile/_service_options.html.erb\u003c/code\u003e.  We'll also change all of the references to Twitter to use variables instead.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Add your \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003efriendly\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e account\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/\u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Remove \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003efriendly\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eauthentication_for\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e \u003cspan\u003e:data\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e:confirm\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'Are you sure?'\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e \u003cspan\u003e:method\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:delete\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow in \u003ccode\u003eprofile/index.html.erb\u003c/code\u003e we can just call that partial once for Twitter and once for GitHub.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003erender\u003c/span\u003e \u003cspan\u003e'service_options'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:service\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'twitter'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:friendly\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'Twitter'\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;br/\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003erender\u003c/span\u003e \u003cspan\u003e'service_options'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:service\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'github'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:friendly\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e'GitHub'\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eFor the next step, \u003ccode\u003eWhen she adds her GitHub account\u003c/code\u003e, we can again alter an existing step.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she adds her (.*?) account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Add your \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e account\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd finally, we can alter the \u003ccode\u003eWhen she removes her Twitter account\u003c/code\u003e step to also handle GitHub.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she removes her (.*?) account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Remove \u003c/span\u003e\u003cspan\u003e#{\u003c/span\u003e\u003cspan\u003eservice\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd that's it!  Now we can allow users to log in with either Twitter or GitHub, and then after logging in they can add the other service to their account.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - Multiple Authentications (Part 1)","link":"http://www.octolabs.com/blogs/octoblog/2014/01/07/techlahoma_multiple_authentications_p1/","author":"Article Author","publishedDate":"Mon, 06 Jan 2014 16:00:00 -0800","contentSnippet":"For Techlahoma weâ€™ve decided that we want to allow a user to connect multiple social profiles to a single account. In this ...","content":"\u003cp\u003e\u003cspan\u003eFor Techlahoma weâ€™ve decided that we want to allow a user to connect multiple social profiles to a single account. In this installment weâ€™ll look at writing some feature scenarios that describe the functionality that we need, and then weâ€™ll fill out the step definitions needed to turn those scenarios into fully executable tests.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eAfter spending a few minutes working on a couple of feature scenarios I ended up with two scenarios that cover most of the contours of this feature.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Multiple Auth Providers\n  As a Techlahoma admin\n  I want to allow users to show links to their various online personas\n  But I want to verify that the things they are linking to are legit\n  So I want to allow them to authenticate with multiple auth providers\n  And I'll build the URL to their profiles myself\n  The user should have the option to show/hide each provider\n\n  @omniauth_test\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add Twitter\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with GitHub\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her Twitter account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she makes the provider public\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove Twitter\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Hide Twitter\"\u003c/span\u003e\n\n  \u003cspan\u003e@omniauth_test\u003c/span\u003e\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Add GitHub\n    \u003cspan\u003eGiven\u003c/span\u003e a user signed in with Twitter\n    \u003cspan\u003eWhen\u003c/span\u003e she visits her profile\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Add your GitHub account\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her GitHub account\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she does not make the provider public\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Remove GitHub\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Show GitHub\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch2\u003eScenario : Add Twitter\u003c/h2\u003e\n\n\u003cp\u003eFocusing just on the \"Add Twitter\" scenario we can get right to work implementing step definitions.  The first step is very straight forward, we just need to set up a user that is signed in through GitHub.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a user signed in with GitHub$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/signin\"\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThis step exercises code that's already in place, so we immediately get a passing step when running cucumber.\u003c/p\u003e\n\n\u003cp\u003eNext up we need a step definition for \"When she visits her profile\".  This step is also pretty easy.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she visits her profile$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/profile\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when we run cucumber we can see that we have some code to write to get this step to pass.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber -r features features/users/multiple_auth.feature:9\n...\n    When she visits her profile \u003cspan\u003e# features/step_definitions/users_steps.rb:19\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/profile\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:11:in \u003cspan\u003e`\u003c/span\u003eWhen she visits her profile\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eFirst, lets generate a controller and view to handle the \u003ccode\u003e/profile\u003c/code\u003e path.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003erails g controller profile index\n\u003c/pre\u003e\n\u003cp\u003eThen edit \u003ccode\u003econfig/routes.rb\u003c/code\u003e and change this line:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"profile/index\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eto this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"profile\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"profile#index\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow for the next step, \"Then she should see â€¦\", we can just adapt a step definition that we already have in place.  We already have a step for \"The HE should see â€¦\", so we can slightly alter the regex in that step to pick up either he or she.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eThen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^[s]?he should see \"(.*?)\"$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003epage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e \u003cspan\u003ehave_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eSo, now we need to start beefing up the profile page.  We can get the current step to pass by just opening \u003ccode\u003eapp/views/profile/index.html.erb\u003c/code\u003e and replacing the generated content with this:\u003c/p\u003e\n\n\u003cpre\u003eAdd your Twitter account\n\u003c/pre\u003e\n\u003cp\u003eNow, this might seem like cheating since we haven't actually put any functionality behind that (not even a link) text.  That's OK.  We're going to have to address that issue soon enough (in the very next step!) and for now we are continuing to make progress by working our way through our failing (or unimplemented) steps.  Ideally the feature scenarios that we write will have enough detail that if we continue to write detailed features and then implement their steps we'll end up with only the application code that we need to satisfy the tested scenarios, and nothing more.\u003c/p\u003e\n\n\u003cp\u003eNow we're onto the step to actually add the Twitter account.  The step definition itself is very simple.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^she adds her Twitter account$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when we run cucumber it will tell us that the reprieve earned from \"cheating\" in the last step is short lived.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber -r features features/users/multiple_auth.feature:9\n...\n    When she adds her Twitter account \u003cspan\u003e# features/step_definitions/users_steps.rb:34\u003c/span\u003e\n      Unable to find link or button \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eCapybara::ElementNotFound\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:13:in \u003cspan\u003e`\u003c/span\u003eWhen she adds her Twitter account\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eSo at this point we're ready to actually add the Twitter authentication.  We're relying on OmniAuth to handle most of the heavy lifting, so to get things started we just need to link the user to \u003ccode\u003e/auth/twitter\u003c/code\u003e.  So we can update the profile template to look like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Add your Twitter account\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/twitter\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow cumber lets us know that we're on to the next step:\u003c/p\u003e\n\n\u003cpre\u003e...\n     Then she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003e# features/step_definitions/users_steps.rb:24\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Welcome Test User! Sign Out Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:16:in \u003cspan\u003e`\u003c/span\u003eThen she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003ch2\u003eA quick bug hunt and fix\u003c/h2\u003e\n\n\u003cp\u003eFrom the error above we can see that the \u003ccode\u003ehome/index\u003c/code\u003e template is being rendered and cucumber is not finding the text \"Would you like to make this public?\".  We could go straight to implementing that step, but I have a hunch that something isn't quite right with the implementation for ADDING a Twitter auth onto an existing GitHub auth.  After all, we haven't written any code specifically for that situation.  I suspect that after the Twitter auth dance happens that a new user is being created and the old user is being logged out.  So, just to test my hunch lets modify the scenario to check for a couple of things.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e...\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e she adds her Twitter account\n    \u003cspan\u003eThen\u003c/span\u003e User.count should \u003d\u003d 1\n    \u003cspan\u003eThen\u003c/span\u003e Authentication.count should \u003d\u003d 2\n    \u003cspan\u003eThen\u003c/span\u003e she should see \u003cspan\u003e\"Would you like to make this public?\"\u003c/span\u003e\n\u003cspan\u003e...\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe're just want to check to make sure that we have only one User record and 2 Authentication records.  (This is kind of crude, and generally not something you'd do in a cucumber test, but it's a nice quick and dirty way to test my hunch. And it's better than having the test visit an admin portal to find out the number of usersâ€¦  :P )\u003c/p\u003e\n\n\u003cp\u003eNow running cucumber we can see that my hunch is correct.\u003c/p\u003e\n\n\u003cpre\u003e...\n    Then User.count should \u003cspan\u003e\u003d\u003d\u003c/span\u003e 1 \u003cspan\u003e# features/step_definitions/users_steps.rb:43\u003c/span\u003e\n      expected: 1\n           got: 2 \u003cspan\u003e(\u003c/span\u003eusing \u003cspan\u003e\u003d\u003d)\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/multiple_auth.feature:14:in \u003cspan\u003e`\u003c/span\u003eThen User.count should \u003cspan\u003e\u003d\u003d\u003c/span\u003e 1\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eWe're ending up with 2 Users instead of just one.  So, we'll need to alter the OmniAuth callback to handle the case when the user is already logged in but wants to add an additional auth provider.  The \u003ccode\u003eSessionsController#create\u003c/code\u003e action is handling the auth provider callbacks, so we'll need to start by looking there.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n    \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n    \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n    \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe only difference we need here is to pass in the \u003ccode\u003ecurrent_user\u003c/code\u003e to \u003ccode\u003eAuthentication.from_omniauth\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we need to update \u003ccode\u003efrom_omniauth\u003c/code\u003e to deal with the current user if present.  We also need to remove the line from \u003ccode\u003ecreate_from_omniauth\u003c/code\u003e where we create a new \u003ccode\u003eUser\u003c/code\u003e for each new \u003ccode\u003eAuthentication\u003c/code\u003e.  Here's the new code for both methods.\u003c/p\u003e\n\n\u003cpre\u003e  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eauth\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eslice\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e)).\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enil?\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enil?\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:name\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\n    \u003cspan\u003eelsif\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epresent?\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enil?\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\n      \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esave\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n    \u003cspan\u003eauth\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003einfo\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003erescue\u003c/span\u003e \u003cspan\u003e\"\"\u003c/span\u003e\n    \u003cspan\u003ecreate!\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euid\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we're back to the stage where we should be seeing \"Would you like to make this public?\".\u003c/p\u003e\n\n\u003ch2\u003eStay tuned.\u003c/h2\u003e\n\n\u003cp\u003eIt's starting to get late, so that's going to be the end of it for tonight.  In the next installment we'll finish this feature.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - Omniauth Local Setup","link":"http://www.octolabs.com/blogs/octoblog/2014/01/06/techlahoma_omniauth_local_setup/","author":"Article Author","publishedDate":"Sun, 05 Jan 2014 16:00:00 -0800","contentSnippet":"In previous posts we looked at creating the Techlahoma app and writing a few Cucumber feature scenarios, writing the first step ...","content":"\u003cp\u003e\u003cspan\u003eIn previous posts we looked at \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/27/rails_new_techlahoma\"\u003ecreating the Techlahoma app and writing a few Cucumber feature scenarios\u003c/a\u003e\u003cspan\u003e, \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/28/techlahoma_1st_step_definitions\"\u003ewriting the first step definitions to make the Cucumber scenarios pass\u003c/a\u003e\u003cspan\u003e, and \u003c/span\u003e\u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/30/techlahoma_omniauth_ftw\"\u003eintegrating OmniAuth to allow us to delegate authentication to 3rd parties like GitHub and Twitter\u003c/a\u003e\u003cspan\u003e. Today Iâ€™m going to set up my local environment with GitHub and Twitter integrations to complete the user sign in experience.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the last post we configured OmniAuth to look for some configuration info in environment variables.  For GitHub, for example, we're looking at \u003ccode\u003eENV['GITHUB_CONSUMER_KEY']\u003c/code\u003e and \u003ccode\u003eENV['GITHUB_CONSUMER_SECRET']\u003c/code\u003e.  I'm going to use \u003ca href\u003d\"https://github.com/ddollar/foreman\"\u003eForeman\u003c/a\u003e to handle the job of setting up environment variable and starting local services.\u003c/p\u003e\n\n\u003cp\u003eFirst we need a \u003ccode\u003eProcfile\u003c/code\u003e to tell \u003ccode\u003eforeman\u003c/code\u003e how to start a local web worker.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eweb: \u003c/span\u003e\u003cspan\u003erails\u003c/span\u003e \u003cspan\u003es\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow to start a local server instead of running \u003ccode\u003erails s\u003c/code\u003e I can use \u003ccode\u003eforeman start\u003c/code\u003e.  This same command will also start any background process that we may eventually add, and it will set up the environment variables that we need for 3rd part auth.\u003c/p\u003e\n\n\u003cp\u003eNext we need to create a file called \u003ccode\u003e.env\u003c/code\u003e in the main project directory.  We'll also add it to \u003ccode\u003e.gitignore\u003c/code\u003e since it will contain info that we don't want to be a part of the public repo.\u003c/p\u003e\n\n\u003cpre\u003etouch .env\n\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\".env\"\u003c/span\u003e \u0026gt;\u0026gt; .gitignore\n\u003c/pre\u003e\n\u003cp\u003eNow, to get the tokens for GitHub I went to the \u003ca href\u003d\"https://github.com/settings/applications/new\"\u003eNew OAuth Application Page\u003c/a\u003e and entered \"Techlahoma Devel\" as the name of the app, \u003ccode\u003ehttp://localhost:3000/\u003c/code\u003e as the application home page and \u003ccode\u003ehttp://localhost:3000/auth/github/callback\u003c/code\u003e as the callback URL.  Then I took the \"Client ID\" and \"Client Secret\" and added them to the \u003ccode\u003e.env\u003c/code\u003e file like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGITHUB_CONSUMER_KEY\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientID\u003c/span\u003e\n\u003cspan\u003eGITHUB_CONSUMER_SECRET\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientSecret\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow I can use \u003ccode\u003eforeman start\u003c/code\u003e to start my local server, visit the sign in page and click on \"Sign in with GitHub\".  Then I'm redirected to GitHub and show a page that tells me that \"Techlahoma Devel\" is requesting some information.  Clicking the \"Allow Access\" button redirects me back to my local machine and I can see in the header of the page that I'm logged in.  Woot!\u003c/p\u003e\n\n\u003cp\u003eNow to set up Twitter I go to the \u003ca href\u003d\"https://dev.twitter.com/apps/new\"\u003eCreate an applicaton page\u003c/a\u003e and create another \"Techlahoma Devel\" application.  Unfortunately Twitter doesn't recognize \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e as a valid URL format.  I use \u003ca href\u003d\"https://forwardhq.com/\"\u003eForward\u003c/a\u003e to (selectively) allow public access to my local development server.  So, I went into the techlahoma app dir and ran \u003ccode\u003eforward 3000\u003c/code\u003e.  This gives me a publicly accessible url that I can use for the application home page and callback URL.\u003c/p\u003e\n\n\u003cp\u003eNow I add the Client ID and Client Secret to the \u003ccode\u003e.env\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eTWITTER_CONSUMER_KEY\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientID\u003c/span\u003e\n\u003cspan\u003eTWITTER_CONSUMER_SECRET\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e\u003cspan\u003eClientSecret\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd add a \"Sign in with Twitter\" link to \u003ccode\u003eapp/views/sessions/new.html.erb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With Twitter\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/twitter\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow I can sign in with Twitter.  Hooray!\u003c/p\u003e\n\n\u003cp\u003eNext time we'll write some feature scenarios to allow a user to add multiple authentication providers to their account.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - OmniAuth FTW!","link":"http://www.octolabs.com/blogs/octoblog/2013/12/30/techlahoma_omniauth_ftw/","author":"Article Author","publishedDate":"Sun, 29 Dec 2013 16:00:00 -0800","contentSnippet":"In the last post we created step definitions for the first part of a sign in scenario, and we got as far as adding a dead \"Sign ...","content":"\u003cp\u003eIn the \u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/28/techlahoma_1st_step_definitions\"\u003elast post\u003c/a\u003e we created step definitions for the first part of a sign in scenario, and we got as far as adding a dead \"Sign In\" link to the page.  Now we're ready to actually build the sign in system.  We've decided that we do not want to be storing passwords in our system, instead we'll depend on 3rd party authentication providers, namely GitHub and Twitter to start.  \u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href\u003d\"https://github.com/intridea/omniauth\"\u003eOmniAuth\u003c/a\u003e is a great gem that handles most of the work of delegating authentication.  The \u003ca href\u003d\"http://railscasts.com/episodes/241-simple-omniauth\"\u003eSimple OmniAuth RailsCast\u003c/a\u003e has a great overview of getting started with OmniAuth.  We're going to use a slightly modified version of the approach in the RailsCast.  \u003c/p\u003e\n\n\u003cp\u003eWe want to allow a user to connect both their Twitter account and their GitHub account, and potentially other providers down the road.  So, we'll have the standard \u003ccode\u003eUser\u003c/code\u003e model that will represent an individual, and then we'll have an \u003ccode\u003eAunthentication\u003c/code\u003e model that will represent one linked account.  When a signed out user authenticates through one of the providers for the first time, we'll create an \u003ccode\u003eAuthentication\u003c/code\u003e record for that provider, and also a \u003ccode\u003eUser\u003c/code\u003e record to represent the individual.  Then we'll prompt them to link other accounts.  Each new linked account will result in a new \u003ccode\u003eAuthentication\u003c/code\u003e record linked to that \u003ccode\u003eUser\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGetting started\u003c/h3\u003e\n\n\u003cp\u003eTo follow BDD/TDD best practices, let's just start with the next step definition that we need to implement. \u003ccode\u003eWhen he signs in with GitHub\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis sounds like a simple step, but it's actually going to be comprised of a few steps.  For simplicity of UI, we'll want to have a single \"Sign In\" link in the header of the site.  When that is clicked the user should be presented with the available auth providers so that they can choose which one to use.  In this case we'll assume that they choose to authenticate through GitHub.\u003c/p\u003e\n\n\u003cp\u003eFirst let's use this as the step definition\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he signs in with GitHub$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n  \u003cspan\u003epage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e \u003cspan\u003ehave_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eclick_on\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when we run Cucumber we see this:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber features/users/signin.feature -r features/\nUsing the default profile...\nFeature: Sign In\n  As a visiting user\n  I want to sign \u003cspan\u003ein\n  \u003c/span\u003eSign \u003cspan\u003ein \u003c/span\u003ewill happen via GitHub \u003cspan\u003e(\u003c/span\u003eand possibly other auth providers\u003cspan\u003e)\u003c/span\u003e\n\n  Scenario: Sucessful sign \u003cspan\u003ein\u003c/span\u003e     \u003cspan\u003e# features/users/signin.feature:6\u003c/span\u003e\n    Given a signed out user       \u003cspan\u003e# features/step_definitions/users_steps.rb:1\u003c/span\u003e\n    When he visits the home page  \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e  \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Sign In Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:10:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n    Then he should see \"Sign Out\" # features/step_definitions/users_steps.rb:9\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThe error message shows that we're still viewing our \u003ccode\u003ehome/index.html.erb\u003c/code\u003e template.  That's because the \"Sign In\" link is still empty.  We need to point that link somewhere, so let's create a \u003ccode\u003eSessionsController\u003c/code\u003e to handle prompting the user for a new session and creating the session when the auth provider returns. We'll tell the generator that we want a \u003ccode\u003enew\u003c/code\u003e action including a template.\u003c/p\u003e\n\n\u003cpre\u003erails g controller sessions new\n\u003c/pre\u003e\n\u003cp\u003eAlso add this line to \u003ccode\u003econfig/routes.rb\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"signin\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"sessions#new\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:as\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:signin\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen update the \u003ccode\u003eviews/layouts/_header.html.erb\u003c/code\u003e template to point to the real sign in page.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esignin_path\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we can add an empty \"Sign In With GitHub\" link to \u003ccode\u003eviews/sessions/new.html.erb\u003c/code\u003e and our current step definition will pass, but we'll get an error that the \"Sign Out\" link has not appeared.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"#\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eOmniAuth\u003c/h3\u003e\n\n\u003cp\u003eNow we need to add OmniAuth to the \u003ccode\u003eGemfile\u003c/code\u003e. Since we need strategies for GitHub and Twitter, we can just include those gems, and they'll include OmniAuth itself as a dependency.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e\"omniauth-github\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026quot;~\u0026gt; 1.1.1\u0026quot;\u003c/span\u003e\n\u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e\"omniauth-twitter\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026quot;~\u0026gt; 1.0.1\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen run \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow we can change the link to point to \u003ccode\u003e/auth/github\u003c/code\u003e and OmniAuth with take care of the rest.  We'll also add a link to the built in 'developer' strategy that comes with omni-auth.  This is handy for local testing so that you don't have to set up GitHub or Twitter integration yet.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With GitHub\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/github\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproduction?\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;br\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In With Developer\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"/auth/developer\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eBut now Cucumber will fail, saying that there's no route for \u003ccode\u003e/auth/github\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e...\n  When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/auth/github\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:10:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThis is because we haven't configured OmniAuth yet.  Put this at \u003ccode\u003econfig/initilizers/omniauth.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eapplication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emiddleware\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBuilder\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e:developer\u003c/span\u003e \u003cspan\u003eunless\u003c/span\u003e \u003cspan\u003eRails\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eproduction?\u003c/span\u003e\n  \u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e:twitter\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'TWITTER_CONSUMER_KEY'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'TWITTER_CONSUMER_SECRET'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e:github\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'GITHUB_CONSUMER_KEY'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eENV\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e'GITHUB_CONSUMER_SECRET'\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eWe also need to setup OmniAuth for testing.  Add this to \u003ccode\u003efeatures/support/omniauth.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eBefore\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'@omniauth_test'\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etest_mode\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e\n \n  \u003cspan\u003e# the symbol passed to mock_auth is the same as the name of the provider set up in the initializer\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emock_auth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:github\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"github\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"abc123\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\"email\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"test@xxxx.com\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"first_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"last_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"User\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test User\"\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emock_auth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:twitter\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"twitter\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"def456\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\"email\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"test@xxxx.com\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"first_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"last_name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"User\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e\u003cspan\u003e\"Test User\"\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eend\u003c/span\u003e\n \n\u003cspan\u003eAfter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e'@omniauth_test'\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003eOmniAuth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etest_mode\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen we need to update the feature file (\u003ccode\u003efeatures/users/signin.feature\u003c/code\u003e) to indicate that the sing in test is an \u003ccode\u003e@omniauth_test\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sign In\n  As a visiting user\n  I want to sign in\n  Sign in will happen via GitHub (and possibly other auth providers)\n\n  @omniauth_test\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sucessful sign in\n    \u003cspan\u003eGiven\u003c/span\u003e a signed out user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he signs in with GitHub\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n\n\u003cspan\u003e...\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow Cucumber will complain about a missing route for \u003ccode\u003e/auth/github/callback\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e...\n    When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/auth/github/callback\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:11:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n\u003c/span\u003e\u003c/pre\u003e\u003cp\u003eThis means that OmniAuth is properly simulating the \"OAuth Dance\" with GitHub and is now ready for the application to handle an authenticated user.  Now we need to add handling for that route and point it to \u003ccode\u003eSessionsController#new\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e# add to config/routes.rb\u003c/span\u003e\n\u003cspan\u003ematch\u003c/span\u003e \u003cspan\u003e\"/auth/:provider/callback\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"sessions#create\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:via\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:get\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:post\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eGenerate the models\u003c/h3\u003e\n\n\u003cp\u003eBefore we can implement the session handling we're going to need models to represent the \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eAuthentication\u003c/code\u003e.  Let's generate the models and run the DB migrations.\u003c/p\u003e\n\n\u003cpre\u003erails g model user name:string\nrails g model authentication user_id:integer provider:string uid:string name:string\nrake db:migrate; rake db:test:prepare;\n\u003c/pre\u003e\u003cp\u003eWe can also set up the relationship between the models.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActiveRecord\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003ebelongs_to\u003c/span\u003e \u003cspan\u003e:user\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActiveRecord\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003ehas_many\u003c/span\u003e \u003cspan\u003e:authentications\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eCreating a Session\u003c/h3\u003e\n\n\u003cp\u003eNow we can get back to creating the user session.  Handling the info that we get back from OmniAuth is potentially messy, so in order to keep the controller code nice and light, let's use a \u003ccode\u003efrom_omniauth\u003c/code\u003e method on the \u003ccode\u003eAuthentication\u003c/code\u003e class to handle looking up or creating an \u003ccode\u003eAuthentication\u003c/code\u003e based on the OAuth info.  Then we'll grab the \u003ccode\u003eUser\u003c/code\u003e for that \u003ccode\u003eAuthentication\u003c/code\u003e. So the \u003ccode\u003ecreate\u003c/code\u003e method on \u003ccode\u003eSessionsController\u003c/code\u003e looks like this.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eprotect_from_forgery\u003c/span\u003e \u003cspan\u003e:except\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:create\u003c/span\u003e\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e\n  \u003cspan\u003eauthentication\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eenv\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"omniauth.auth\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\n  \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\n  \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed in!\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eIn the \u003ccode\u003efrom_omniauth\u003c/code\u003e method, we're just going to return the first Authentication that matches the provider and uid, or create a new one.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAuthentication\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActiveRecord\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003ebelongs_to\u003c/span\u003e \u003cspan\u003e:user\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efrom_omniauth\u003c/span\u003e\n    \u003cspan\u003ewhere\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eslice\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e)).\u003c/span\u003e\u003cspan\u003efirst\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate_from_omniauth\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003einfo\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"user_info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e||\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"info\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003einfo\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"name\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003erescue\u003c/span\u003e \u003cspan\u003e\"\"\u003c/span\u003e\n    \u003cspan\u003ecreate!\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprovider\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"provider\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euid\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eauth\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\"uid\"\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\n      \u003cspan\u003eauthentication\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e:name\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003eend\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we'll actually be logged in, but Cucumber still isn't happy because we haven't added the \"Sign Out\" link to the page.\u003c/p\u003e\n\n\u003cp\u003eFirst we'll add a helper function that will give us easy access to the currently signed in user.  How about we call it \u003ccode\u003ecurrent_user\u003c/code\u003e?\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eApplicationController\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003eActionController\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eBase\u003c/span\u003e\n  \u003cspan\u003e# Prevent CSRF attacks by raising an exception.\u003c/span\u003e\n  \u003cspan\u003e# For APIs, you may want to use :null_session instead.\u003c/span\u003e\n  \u003cspan\u003eprotect_from_forgery\u003c/span\u003e \u003cspan\u003ewith: :exception\u003c/span\u003e\n\n  \u003cspan\u003ehelper_method\u003c/span\u003e \u003cspan\u003e:current_user\u003c/span\u003e\n\n  \u003cspan\u003eprivate\u003c/span\u003e\n\n  \u003cspan\u003edef\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\n    \u003cspan\u003e@current_user\u003c/span\u003e \u003cspan\u003e||\u003d\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n  \u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow we can update the \u003ccode\u003eapp/views/layouts/_header.html.erb\u003c/code\u003e partial to have a sign out link.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  Welcome \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003ecurrent_user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e!\n  \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esignout_path\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esignin_path\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;%%\u003c/span\u003e \u003cspan\u003eend\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003esignout_path\u003c/code\u003e doesn't exist yet, so we need to add a route to \u003ccode\u003econfig/routes.rb\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e\"signout\"\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e\"sessions#destroy\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:as\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003e:signout\u003c/span\u003e\n\u003c/pre\u003e\u003cp\u003eAnd we need to add the \u003ccode\u003edestroy\u003c/code\u003e method to \u003ccode\u003eSessionsController\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003edestroy\u003c/span\u003e\n  \u003cspan\u003esession\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e:user_id\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003enil\u003c/span\u003e\n  \u003cspan\u003eredirect_to\u003c/span\u003e \u003cspan\u003eroot_url\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003enotice: \u003c/span\u003e\u003cspan\u003e\"Signed out!\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAnd that's it! Kind of. Not reallyâ€¦.\u003c/p\u003e\n\n\u003cp\u003eNow a user can sign in through a single provider, but they can't yet connect multiple accounts.\u003c/p\u003e\n\n\u003cp\u003eNext time we'll look at allowing multiple connections as well as smoothing out some of the existing rough spots.  We'll also cover getting environment variables set up correctly to allow local testing of the GitHub integration.  Right now things only work with the simulated OAuth dance inside of Cucumber.  \u003c/p\u003e\n\n\u003cp\u003eAs always feel free to check out the \u003ca href\u003d\"https://github.com/techlahoma/techlahoma\"\u003eTechlahoma code in\nprogress\u003c/a\u003e and don't hesitate to contact us or submit a pull request if you'd like to get involved.\u003c/p\u003e","categories":[]},{"title":"Techlahoma - 1st Step Definitions","link":"http://www.octolabs.com/blogs/octoblog/2013/12/28/techlahoma_1st_step_definitions/","author":"Article Author","publishedDate":"Fri, 27 Dec 2013 16:00:00 -0800","contentSnippet":"Today I'm going to document the process of building the first step\ndefinitions for Techlahoma.  This will turn the Cucumber ...","content":"\u003cp\u003eToday I'm going to document the process of building the first step\ndefinitions for Techlahoma.  This will turn the Cucumber stories that we\nbuilt in \u003ca href\u003d\"http://www.octolabs.com/posts/2013/12/27/rails_new_techlahoma\"\u003epart 1\u003c/a\u003e into runnable test scenarios.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eIn part 1 we saw that Cucumber will give you stubs for your method definitions when you run Scenarios that are missing them.  So, to get started I just created a file at \u003ccode\u003efeatures/step_definitions/user_steps.rb\u003c/code\u003e and I pasted in the stubs that Cucumber provided.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a signed out user$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he visits the home page$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eThen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he should see \"(.*?)\"$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003earg1\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he signs in$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he fails the signs in$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a signed in user$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he signs out$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\n\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he fails the sign out$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003epending\u003c/span\u003e \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow when I run the sign in feature I can see that Cucumber is finding the step definitions and knows that they are still pending.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber features/users/signin.feature -r features/\nUsing the default profile...\nFeature: Sign In\n  As a visiting user\n  I want to sign \u003cspan\u003ein\n  \u003c/span\u003eSign \u003cspan\u003ein \u003c/span\u003ewill happen via GitHub \u003cspan\u003e(\u003c/span\u003eand possibly other auth providers\u003cspan\u003e)\u003c/span\u003e\n\n  Scenario: Sucessful sign \u003cspan\u003ein\u003c/span\u003e     \u003cspan\u003e# features/users/signin.feature:6\u003c/span\u003e\n    Given a signed out user       \u003cspan\u003e# features/step_definitions/users_steps.rb:1\u003c/span\u003e\n      TODO \u003cspan\u003e(\u003c/span\u003eCucumber::Pending\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:7:in \u003cspan\u003e`\u003c/span\u003eGiven a signed out user\u003cspan\u003e'\n    When he visits the home page  # features/step_definitions/users_steps.rb:5\n    Then he should see \"Sign In\"  # features/step_definitions/users_steps.rb:9\n    When he signs in with GitHub  # features/step_definitions/users_steps.rb:13\n    Then he should see \"Sign Out\" # features/step_definitions/users_steps.rb:9\n\n  Scenario: Failed sign in                # features/users/signin.feature:13\n    Given a signed out user               # features/step_definitions/users_steps.rb:1\n      TODO (Cucumber::Pending)\n      features/users/signin.feature:14:in `Given a signed out user'\u003c/span\u003e\n    When he visits the home page          \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e          \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    When he fails the sign \u003cspan\u003ein \u003c/span\u003ewith GitHub \u003cspan\u003e# features/step_definitions/users_steps.rb:17\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e          \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e            \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n\n2 scenarios \u003cspan\u003e(\u003c/span\u003e2 pending\u003cspan\u003e)\u003c/span\u003e\n11 steps \u003cspan\u003e(\u003c/span\u003e9 skipped, 2 pending\u003cspan\u003e)\u003c/span\u003e\n0m0.138s\n\u003c/pre\u003e\n\u003cp\u003eNow we're ready to start filling out the step definitions. Let's just step through the first few and start making them pass.\u003c/p\u003e\n\n\u003cp\u003eThe first one is easy.  There is nothing to do, so we can just remove the \u003ccode\u003epending\u003c/code\u003e call, and add a comment noting that the step is intentionally blank.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eGiven\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^a signed out user$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003e# this doesn't need any explicit action\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe next one is pretty straight forward.  Cucumber wraps Capybara, so inside the step definitions we can use standard Capybara syntax.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eWhen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he visits the home page$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003evisit\u003c/span\u003e \u003cspan\u003e\"/\"\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eFor the \u003ccode\u003eThen he should see \"Sign In\"\u003c/code\u003e step, we can use regular expressions to generalize that step.  This means that we can reuse this step definition for any text that we want to locate on the page.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eThen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/^he should see \"(.*?)\"$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e|\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e|\u003c/span\u003e\n  \u003cspan\u003epage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshould\u003c/span\u003e \u003cspan\u003ehave_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eshould\u003c/code\u003e syntax requires rspec, so add it to the \u003ccode\u003e:test\u003c/code\u003e group in \u003ccode\u003eGemfile\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e\"rspec-rails\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026quot;~\u0026gt; 2.14.0\u0026quot;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen do a quick \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow the sign in feature will pass the first step (doing nothing), but will fail at visiting the home page.\u003c/p\u003e\n\n\u003cpre\u003e...\n    When he visits the home page  \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n      No route matches \u003cspan\u003e[\u003c/span\u003eGET] \u003cspan\u003e\"/\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eActionController::RoutingError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:8:in \u003cspan\u003e`\u003c/span\u003eWhen he visits the home page\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThe visit to the home page is failing because we haven't set up a root route for the app yet.  That can be handled by generating a controller and setting it to be the root.\u003c/p\u003e\n\n\u003cp\u003eFirst generate a home controller.\u003c/p\u003e\n\n\u003cpre\u003erails g controller home index\n\u003c/pre\u003e\n\u003cp\u003eThen open \u003ccode\u003econfig/routes.rb\u003c/code\u003e and add a line to set it as the root route.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eroot\u003c/span\u003e \u003cspan\u003e\"home#index\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eNow cucumber will fail with a different error.\u003c/p\u003e\n\n\u003cpre\u003e...\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e  \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n      expected to find text \u003cspan\u003e\"Sign In\"\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e\"Home#index Find me in app/views/home/index.html.erb\"\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003eRSpec::Expectations::ExpectationNotMetError\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:9:in \u003cspan\u003e`\u003c/span\u003eThen he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e'\n...\n\u003c/span\u003e\u003c/pre\u003e\n\u003cp\u003eThe test for the \"Sign In\" link is failing because we haven't added that to the page yet.  This is something that we'll want to be on every page, so in the layout right before the \u003ccode\u003eyield\u003c/code\u003e add this line.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003erender\u003c/span\u003e \u003cspan\u003e'layouts/header'\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen create a file at \u003ccode\u003eviews/layouts/_header.html.erb\u003c/code\u003e with this content.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e\u0026lt;%%\u003c/span\u003e\u003cspan\u003e\u003d\u003c/span\u003e \u003cspan\u003elink_to\u003c/span\u003e \u003cspan\u003e\"Sign In\"\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\"#\"\u003c/span\u003e \u003cspan\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eFor now we're just doing the minimum needed to make the currently failing step pass.  As we work through the other steps we'll flesh out this template to be more realistic.\u003c/p\u003e\n\n\u003cp\u003eNow the first three steps of the sign in feature are passing.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber features/users/signin.feature -r features/\nUsing the default profile...\nFeature: Sign In\n  As a visiting user\n  I want to sign \u003cspan\u003ein\n  \u003c/span\u003eSign \u003cspan\u003ein \u003c/span\u003ewill happen via GitHub \u003cspan\u003e(\u003c/span\u003eand possibly other auth providers\u003cspan\u003e)\u003c/span\u003e\n\n  Scenario: Sucessful sign \u003cspan\u003ein\u003c/span\u003e     \u003cspan\u003e# features/users/signin.feature:6\u003c/span\u003e\n    Given a signed out user       \u003cspan\u003e# features/step_definitions/users_steps.rb:1\u003c/span\u003e\n    When he visits the home page  \u003cspan\u003e# features/step_definitions/users_steps.rb:5\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e  \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    When he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub  \u003cspan\u003e# features/step_definitions/users_steps.rb:13\u003c/span\u003e\n      TODO \u003cspan\u003e(\u003c/span\u003eCucumber::Pending\u003cspan\u003e)\u003c/span\u003e\n      features/users/signin.feature:10:in \u003cspan\u003e`\u003c/span\u003eWhen he signs \u003cspan\u003ein \u003c/span\u003ewith GitHub\u003cspan\u003e'\n    Then he should see \"Sign Out\" # features/step_definitions/users_steps.rb:9\n\n  Scenario: Failed sign in                # features/users/signin.feature:13\n    Given a signed out user               # features/step_definitions/users_steps.rb:1\n    When he visits the home page          # features/step_definitions/users_steps.rb:5\n    Then he should see \"Sign In\"          # features/step_definitions/users_steps.rb:9\n    When he fails the sign in with GitHub # features/step_definitions/users_steps.rb:17\n      TODO (Cucumber::Pending)\n      features/users/signin.feature:17:in `When he fails the sign in with GitHub'\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e          \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n    Then he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e            \u003cspan\u003e# features/step_definitions/users_steps.rb:9\u003c/span\u003e\n\n2 scenarios \u003cspan\u003e(\u003c/span\u003e2 pending\u003cspan\u003e)\u003c/span\u003e\n11 steps \u003cspan\u003e(\u003c/span\u003e3 skipped, 2 pending, 6 passed\u003cspan\u003e)\u003c/span\u003e\n0m0.180s\n\u003c/pre\u003e\n\u003cp\u003eNow we're ready to actually log the user in, but that's big enough for a post of its own.  Next time we'll look at using omniauth to handle authenticating a user through GitHub and Twitter.\u003c/p\u003e\n\n\u003cp\u003eYou're welcome to \u003ca href\u003d\"https://github.com/techlahoma/techlahoma\"\u003echeck out the\nrepo\u003c/a\u003e, and if you'd like to get involved we love pull requests.\u003c/p\u003e","categories":[]},{"title":"rails new techlahoma","link":"http://www.octolabs.com/blogs/octoblog/2013/12/27/rails_new_techlahoma/","author":"Article Author","publishedDate":"Thu, 26 Dec 2013 16:00:00 -0800","contentSnippet":"Rob Sullivan and Amanda Harlin have been kicking around ideas for something called Techlahoma and they recently asked me to get ...","content":"\u003cp\u003e\u003ca href\u003d\"https://twitter.com/DataChomp\"\u003eRob Sullivan\u003c/a\u003e and \u003ca href\u003d\"https://twitter.com/amandaharlin\"\u003eAmanda Harlin\u003c/a\u003e have been kicking around ideas for something called Techlahoma and they recently asked me to get involved to help.  We decided early on that the app would be a Rails project, and I suggested that we use Cucumber to describe the main user features that we hope to build.  In the early stages these stories will act as our design document, allowing us to formally capture the description of the features that will be available to end users.  These documents will live in the project repo, and will be just like any other code/text file.  We'll be able to track the history of feature descriptions, make drastic changes to them without fear of losing previous work, use pull requests to initiate discussion about new features, and all of the other great benefits that you get with git and GitHub.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eI had the honor of generating the new app, so here I'm going to document the steps that I took to start the project and build the first few Cucumber scenarios.\u003c/p\u003e\n\n\u003cp\u003eFirst I generated a new rails app, using postgres as the DB and using the \u003ccode\u003e-T\u003c/code\u003e option to skip \u003ccode\u003eTest::Unit\u003c/code\u003e.  Then I immediately initialized the project directory as a git repo, added all of the app files to the repo, committed and pushed.\u003c/p\u003e\n\n\u003cpre\u003erails new techlahoma -d postgresql -T\n\u003cspan\u003ecd \u003c/span\u003etechlahoma\ngit init .\ngit add .\ngit commit -m \u003cspan\u003e\"Initial rails app\"\u003c/span\u003e\ngit remote add origin git@github.com:techlahoma/techlahoma.git\ngit push -u origin master\n\u003c/pre\u003e\n\u003cp\u003eThen I added a couple of gems to the \u003ccode\u003eGemfile\u003c/code\u003e for running cucumber.\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003egroup\u003c/span\u003e \u003cspan\u003e:test\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n  \u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e'cucumber-rails'\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e:require\u003c/span\u003e \u003cspan\u003e\u003d\u0026gt;\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n  \u003cspan\u003e# database_cleaner is not required, but highly recommended\u003c/span\u003e\n  \u003cspan\u003egem\u003c/span\u003e \u003cspan\u003e'database_cleaner'\u003c/span\u003e\n\u003cspan\u003eend\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eThen a quick \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen I installed the cucumber configuration and skeleton.\u003c/p\u003e\n\n\u003cpre\u003erails generate cucumber:install \n\u003c/pre\u003e\n\u003cp\u003eNow I'm ready to run cucumber!\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003e$ \u003c/span\u003ecucumber \nUsing the default profile...\n0 scenarios\n0 steps\n0m0.000s\n\u003c/pre\u003e\u003cp\u003eCucumber is running, but I don't have any scenarios ready to run.  Let's fix that.  One of the features that we know we want to have is the ability for users to sign in and out.  So, I'm going to start there with a feature description.  First let's look at the feature files themselves, and then I'll describe their structure.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efeatures/users/sign_in.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sign In\n  As a visiting user\n  I want to sign in\n  Sign in will happen via GitHub (and possibly other auth providers)\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sucessful sign in\n    \u003cspan\u003eGiven\u003c/span\u003e a signed out user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e \u003cspan\u003e# A link on the page\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he signs in\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e  \u003cspan\u003e# A link on the page\u003c/span\u003e\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Failed sign in\n    \u003cspan\u003eGiven\u003c/span\u003e a signed out user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he fails the signs in\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003efeatures/users/sign_out.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Sign Out\n  As a signed in user\n  I want to sign out\n  To protect my account stuff\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Successful sign out\n    \u003cspan\u003eGiven\u003c/span\u003e a signed in user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he signs out\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign In\"\u003c/span\u003e\n\n  \u003cspan\u003eScenario\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Failed sign out\n    \u003cspan\u003eGiven\u003c/span\u003e a signed in user\n    \u003cspan\u003eWhen\u003c/span\u003e he visits the home page\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n    \u003cspan\u003eWhen\u003c/span\u003e he fails the sign out\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"Sign Out\"\u003c/span\u003e\n    \u003cspan\u003eThen\u003c/span\u003e he should see \u003cspan\u003e\"sorry\"\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003eAs you can see, these feature files have two main parts.  \u003ccode\u003eFeature\u003c/code\u003e and \u003ccode\u003eScenario\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eFeature\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eFeature\u003c/code\u003e section is only for humans, and is meant to be a high level description of the complete feature or feature set in question.  In this part you're not describing specific use cases or sequences of events, you're just describing the purpose of the feature, and the \"business case\" for why it exists in the first place.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eScenario\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eScenario\u003c/code\u003e sections are also for humans, but they're for computers too.  These are descriptions of specific sequences of events that should happen within the app, and the results that should occur with those events.  Generally you'll have a \u003ccode\u003eScenario\u003c/code\u003e section for each branch, or edge case that your code will need to cover.  You want to keep these descriptions still at a pretty high level, and you don't want to get into the minutia of dealing directly with UI elements.  Notice that the scenarios above have only a single line for something like \u003ccode\u003eWhen he signs in\u003c/code\u003e.  \u003ccode\u003eScenario\u003c/code\u003e sections generally should not contain things like \"she clicks on the 'sign in' link\" or \"she enters her email address\".  These kind of details will be handled later in the step definitions, which is the code that Cucumber will actually run in order to execute these \u003ccode\u003eScenario\u003c/code\u003es as live test code.  \u003c/p\u003e\n\n\u003cp\u003eNow when I run cucumber I see that it's trying to execute my \u003ccode\u003eScenario\u003c/code\u003es but that it can't find step definitions for them.  Handily it provides stubs for the missing step definitions.\u003c/p\u003e\n\n\u003cpre\u003e4 scenarios \u003cspan\u003e(\u003c/span\u003e4 undefined\u003cspan\u003e)\u003c/span\u003e\n22 steps \u003cspan\u003e(\u003c/span\u003e22 undefined\u003cspan\u003e)\u003c/span\u003e\n0m0.212s\n\nYou can implement step definitions \u003cspan\u003efor \u003c/span\u003eundefined steps with these snippets:\n\nGiven\u003cspan\u003e(\u003c/span\u003e/^a signed out users\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he visits the home page\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nThen\u003cspan\u003e(\u003c/span\u003e/^he should see \u003cspan\u003e\"(.*?)\"\u003c/span\u003e\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e |arg1|\n  pending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he signs \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he fails the signs \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nGiven\u003cspan\u003e(\u003c/span\u003e/^a signed \u003cspan\u003ein \u003c/span\u003euser\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he signs out\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\nWhen\u003cspan\u003e(\u003c/span\u003e/^he fails the sign out\u003cspan\u003e$/\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003edo\n  \u003c/span\u003epending \u003cspan\u003e# express the regexp above with the code you wish you had\u003c/span\u003e\nend\n\u003c/pre\u003e\n\u003ch2\u003eBrainstorming\u003c/h2\u003e\n\n\u003cp\u003eThe great thing about cucumber files is that you can start will just the \u003ccode\u003eFeature\u003c/code\u003e section and allow it to act like a design document of sorts where you capture general ideas about the new feature that's being discussed.  I know that one of the things we'd like to include is the ability for companies to maintain a profile that contains some basic information about the company.  I'm not entirely sure what all we want to include there, so for now I'm going to start with a some basic feature files that just take a stab at describing things that might fit into this feature set.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efeatures/company_profiles/create.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Company Profiles\n  As a company owner/operator\n  I want to create a profile for my company\n  So that local developers can learn about me\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003efeatures/company_profiles/tags.feature\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Tags for Companies\n  As a local developer\n  I want to be able to filter companies based on technologies being used\n  So that I can find places where my skills can be put to use\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003efeatures/company_profiles/freelancers.features\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003cspan\u003eFeature\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Freelancer Profiles\n  As a local freelancer\n  I want to create a profile for myself\n  So that local companies can contact me if they could use my skills\n\u003c/pre\u003e\n\u003cp\u003eThese files aren't yet executable by Cucumber, but they're a great starting point for discussion about what we want to have happen here.  We can use them to flush out the ideas and zero in on the requirements.  As that happens usage scenarios will begin to emerge and we'll write a \u003ccode\u003eScenario\u003c/code\u003e section for each use case that we want to consider.\u003c/p\u003e\n\n\u003cp\u003eIn a later installment we'll look at starting to implement some step definitions for scenarios to turn these feature files into fully executable tests.\u003c/p\u003e\n\n\u003cp\u003eIn the mean time you can \"check out the techlahoma repo\":https://github.com/techlahoma/techlahoma and don't hesitate to send over some pull requests if you'd like to get involved.\u003c/p\u003e","categories":[]}]}}, "responseDetails": null, "responseStatus": 200};
